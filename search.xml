<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Flutter</title>
      <link href="/2021/07/25/aboutflutter/"/>
      <url>/2021/07/25/aboutflutter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我个人来说不喜欢Flutter，不喜欢Flutter一层又一层的嵌套写法，不喜欢Dart这个鸟不拉屎的语言。很多东西它设计的很奇怪，比如TextField输入框，每次使用都会遇到问题。比如JSON解析，我第一次见到解析JSON还需要第三方库生成Dart代码的。</p><p>但不得不说，它的确是挺强大的，虽然我不太愿意承认。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native 踩坑记录</title>
      <link href="/2021/07/25/react-native-cai-keng-ji-lu/"/>
      <url>/2021/07/25/react-native-cai-keng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题快问快答"><a href="#常见问题快问快答" class="headerlink" title="常见问题快问快答"></a>常见问题快问快答</h2><ul><li><p>如何解决Text文字内容超出父组件问题？</p><ul><li>尝试添加flexShrink: 1到容器的样式；</li></ul></li><li><p>如何跳转到某个页面，并删除之前的所有页面历史？（比如退出登录后回到首页）</p><ul><li>```tsx<br>import { useNavigation, CommonActions } from ‘@react-navigation/native’;// name就是要跳转的路由名字<br>// 这个方法实际上是重置页面历史的，index默认就是0，所以只有一个历史页面<br>navigation.dispatch(<pre><code>  CommonActions.reset(&#123; index: 0, routes: [&#123; name: &#39;PlaceOrder&#39; &#125;] &#125;));</code></pre><pre class="line-numbers language-none"><code class="language-none">- &#96;TextInput&#96;默认情况下会在点击输入框范围之外消失，如何禁止这种行为？（比如点击输入框右侧的按钮清空文字，默认情况下，需要点击两次才能达到效果）  - 如果不介意使用&#96;ScrollView&#96;的话，可以设置&#96;keyboardShouldPersistTaps&#x3D;&#123;&#39;always&#39;&#125;&#96;，然后&#96;keyboardDismissMode&#x3D;&#123;&#39;on-drag&#39;&#125;&#96;,这样点击就不会收回键盘了，拖动页面的时候才会收回。  - 如果用了&#96;ScrollView&#96;但是不希望页面滚动的话，可以设置&#96;scrollEnabled&#x3D;&#123;false&#125;&#96;禁止滚动；- 如何转发ref？（外部传入一个ref，我想将其绑定到我的一个子组件上？）  - 使用&#96;React.forwardRef&lt;Ref类型，Props类型&gt;()&#96;  - 示例代码：  - &#96;&#96;&#96;ts    const SingleSelectBottomSheet &#x3D; React.forwardRef&lt;BottomSheetModal, SingleSelectBottomSheetProps&gt;((props, ref) &#x3D;&gt; &#123;      &#x2F;&#x2F; 这样外部传入的ref，引用的其实是这个Modal，然后在外部就可以bottomSheet.present()      return &lt; BottomSheetModal ref&#x3D;&#123;ref&#125; &#x2F;&gt;    &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>基于上个问题，如何ref我的子组件本身？我想调用子组件的方法？</p><ul><li><p>```ts<br>interface LoadingToastProperties {<br>  showLoading: () =&gt; void;<br>  hide: () =&gt; void;<br>}</p><p>interface LoadingToastProps {<br>  loadingText?: string;<br>}</p><p>// forwardRef第一个参数是外界在使用这个ref时，能调用什么样的类型，<br>// 第二个参数时props类型<br>const LoadingToast =</p><pre><code>  React.forwardRef&lt;LoadingToastProperties, LoadingToastProps&gt;((props, ref) =&gt; &#123;</code></pre><p>  /// 这个hook返回类型必须要跟ref也就是LoadingToastProperties定义的一样<br>  useImperativeHandle(ref, () =&gt; ({</p><pre><code>  showLoading: () =&gt; &#123;    setDisplay(true);    setLoading(true);  &#125;,   hide: () =&gt; &#123;&#125;,&#125;),[]</code></pre><p>  );</p><p>  return xxx;<br>}</p><pre class="line-numbers language-none"><code class="language-none">  - - 怎么写&#96;useRoute&#96;以及&#96;useNavigation&#96;的泛型？  - &gt; 升级到react-navigation v6后，泛型必须要写了，否则会报错  - useRoute泛型：    - &#96;&#96;&#96;tsx      const route &#x3D; useRoute&lt;RouteProp&lt;any, any&gt;&gt;();            &#x2F;&#x2F; 上面这个写法，route.params是个any类型      type ParamList &#x3D; &#123;        PasswordLogin: &#123;          id: string;        &#125;;      &#125;      const route &#x3D; useRoute&lt;RouteProp&lt;ParamList, &#39;PasswordLogin&#39;&gt;&gt;();      &#x2F;&#x2F; 这种写法，route.params的类型是 &#123;id: string&#125;      &#x2F;&#x2F; 📢📢📢📢：上面的类型定义必须要type，用interface会报错，暂时没弄懂为啥      &#x2F;&#x2F; 📢📢📢📢：ParamList里面的PasswordLogin跟RouteProp第二个泛型是对应的，否则会报错      &#x2F;&#x2F; useRoute的方法定义用泛型就达到了这种效果，很神奇<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>useNavigation泛型：</p></li><li><p>```tsx<br>const navigation = useNavigation&lt;NavigationProp<any>&gt;();<br>// 暂时还没细看，总之这样不会报错了</p><pre class="line-numbers language-none"><code class="language-none">- 报错&#96;invalid language tag&#96;  - 这个是NumberFormatter的报错，一般是参数传错了## 注意事项- 新建Expo项目时，请务必选择Bare Workflow。否则之后无法使用原生IDE开发；  - 更新：我现在发现没必要选择Bare。选了bare以后很多配置都需要自己做，而managed在app.json里面就能配置了。而且我们可以随时使用&#96;expo eject&#96;进入到bare项目，进入后还会根据配置文件生成原生代码。  - &#96;expo run:ios&#96;后也相当于eject了。- 使用hook&#96;setState&#96;之后，不要立即使用新的state，新的state会在下一次渲染的时候才有效；  - &#96;&#96;&#96;tsx    setCountries(value.data.data);    &#x2F;&#x2F;&#x2F; setState是异步的    &#x2F;&#x2F;&#x2F; 这里不要立即使用countries，会产生undefined；    &#x2F;&#x2F; 不要这样写：setPreferredCountry(countries[0]);，要像下面这样用变量    setPreferredCountry(value.data.data[0]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>在设置导航栏组件，比如<code>headerLeft</code>，<code>headerTitle</code>，以及<code>headerRight</code>的时候，请务必使用<code>() =&gt; ReactNode</code>的方式，否则可能会产生奇怪的问题，比如<strong>输入框无法输入</strong>，或者组件无法更新！</p></li><li><p>跟上面一条对应的，能用<code>xxx=&#123;(props) =&gt; &lt;MyComponent &#123;...props&#125; /&gt;&#125;</code>的时候就不要写死<code>xxx=&#123;MyComponent&#125;</code></p><ul><li>这个坑踩在了react-navigation的抽屉导航上面，一开始用后者，发现无法动态更新，无法使用hook，查了半天才发现应该使用前者的方法；</li></ul></li></ul><h2 id="一些棘手的问题"><a href="#一些棘手的问题" class="headerlink" title="一些棘手的问题"></a>一些棘手的问题</h2><ul><li><code>Reanimated 2 failed to create a worklet, maybe xxxxx</code><ul><li>首先检查是不是安装了expo支持的reanimated版本，目前expo SDK 41支持的版本是2.1.0<ul><li>这个似乎不重要，主要看下面两个</li></ul></li><li>然后要检查<code>babel.config.js</code>里面有没有添加reanimated的plugin，注意plugin要放在数组最后一个</li><li>最后如果还是有问题，尝试启动的时候使用<code>expo start --clear</code>清除缓存，这条真的有用；</li></ul></li><li>输入框输入一个字符后，就会失去焦点<ul><li><p>这个问题发生在<code>TextInput</code>渲染在列表内。问题的解决方案是，传参数的时候，不要传render function，传这个render function的执行结果，React Element</p></li><li><blockquote><p>ListHeaderComponent={makeListHeaderView}</p><p>变成这样：ListHeaderComponent={makeListHeaderView()}</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Native </tag>
            
            <tag> TypeScript </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React Navigation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这些年，微博以及其平台上那些渣滓所做的恶</title>
      <link href="/2021/07/17/fuck-weibo/"/>
      <url>/2021/07/17/fuck-weibo/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>几年前，我还没有听说过“女拳”以及“田园女权”这些字眼，有一天我正在微博上冲浪，看到<strong>一首名为《天朝渣男图鉴》的歌</strong>，还不知道什么原因，但是看微博里面都在说被屏蔽，被打压，都在怨天尤地。本着八卦的心态，我顺着微博上的指引找到了<strong>网易云音乐</strong>，我终于听到了这首歌。第一反应就是这首歌还不错，还算是挺有韵律，点开歌词，大概知道了这首歌背后的故事：背景故事由几名女性受害者组成，她们被自己的伴侣陷害或是污蔑，最后这几名女性报仇最后入狱的，确实是几个令人发指的例子，所以<strong>更觉得这首歌好听了</strong>。打开评论区一看，好家伙，我第一次见识到她们的“力量”：</p><blockquote><p>以下把那些我无法归类，不能确定她们是否为正常人，是否为人类的动物，统称为“它”或是“它们”，</p></blockquote><ul><li>有的“人“说“<strong>几千万（三千万还是六千万？）女婴都是被你们杀害了！</strong>”<ul><li>它们把中国男女比例里面，女性比男性少的那么多人全都算到“被杀害的女婴”里面了。<ul><li>“<strong>中国女的少了那么多，一定都是被你们杀害了！</strong>”…</li></ul></li><li>后来前段时间我还看到这种言论的衍生版，微博上有人光明正大造谣，说亲眼看到有人埋婴儿尸体，但我也想不明白为什么它只顾着在那危言耸听，而不去报警。</li></ul></li><li>有的人说“你有关注过你身边女性的生存处境吗？<ul><li>我为什么要关心？她们跟我也没关系啊？</li><li>“你根本就不关心你身边女性的生存处境，你知道她们生活的有多艰难吗！”</li><li>…</li></ul></li><li>有的”人“说，”雪崩的时候没有一片雪花是无辜的！“<ul><li>我忘记我当时是怎么说的了，现在回想起来，我只想说我是无辜的。我生平好像从来也没敢做过什么与”侮辱女性“有关的事情。</li></ul></li><li>有的”人“说，”要革命，要流血牺牲“<ul><li><strong>我可算是知道为什么这首歌会被屏蔽了</strong> 。这种煽动群众意图不轨的言论，不封掉留着干什么？等着这群畜生带兵攻打派出所吗？</li></ul></li></ul><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><p>从这以后，我才算是知道了”女拳“这个词。到今天为止，我仍然认为，把这群思想严重偏激，自私自利无所不用其极，阴阳怪气，甚至是政治立场不正确的群体称之为”女拳“，就是为了跟真正的女权人士区分开来。不幸的是几年来我见到的这样的人屈指可数。只是偶尔能看见几个被微博拳师所困扰，发牢骚的人。</p><p>当然啦，每次提到这类的话题，总有人跳出来用以下这么几个角度来反驳：</p><ul><li>“我们女性想干什么就干什么，凭什么由你来定义”</li><li>“对我们就是打拳，打拳怎么了，一拳锤死你”</li><li>“笑死我了，你难道比我们更懂女权？”</li></ul><p>习惯就好。男女思维从根本上就是有差异的，这个下面会有说。</p><p>自从知道了”田园女权“这个新词，我觉得很”新鲜“。一开始我就是像看猴子一样看待它们，因为我从没想过正常人类以那种思维方式来看待问题。</p><p>我印象最深的几个女拳大V，包括但不限于”恩和元元“，”写字楼大妈“，”果子狸“，还有”黑名单bot“。不过个人以为把最后一个也列为大V是不妥的，前三个走的感觉都是中国古墓公知的道路，后面一个像是一个整天咬人的小学生。没办法，谁叫它混了个脸熟呢。</p><p>前面几个大V专门负责生产谣言，其恶毒程度我都不知道怎么形容。这些个大V真的是各怀鬼胎，虽然走的路线不一样，但是最终目的都差不多，就是靠打拳来赚钱。</p><p>有的拳师头子<strong>上一条微博刚骂完“男人没用，男人都是坏人”，下一条微博就开始卖假阳具了。</strong></p><blockquote><p>为了卖几个情趣用品，它们不惜称自己亲爹为”生物爹“</p></blockquote><p>而有的开始<strong>疯狂渲染”男人威胁论“，给男性扣上犯罪分子的帽子，然后开始兜售所谓的防身课程</strong>。</p><blockquote><p>它们宣称一个女的可以制服一个壮汉，后来这些所谓的防身课程后来被人证明过，宣传视频中也有很多漏洞，想要实现基本也是不可能的。</p></blockquote><h3 id="微博拳师”大事记“"><a href="#微博拳师”大事记“" class="headerlink" title="微博拳师”大事记“"></a>微博拳师”大事记“</h3><p>洪水来了。很多人发现在抗洪前线的都是男性，人们终于开始意识到男性的重要性。终于开始认识到人民子弟兵的重要性。</p><p>可是微博女拳是怎么对男性，以及子弟兵的呢？</p><h5 id="围攻-中国警察网"><a href="#围攻-中国警察网" class="headerlink" title="围攻@中国警察网"></a>围攻@中国警察网</h5><ul><li>起因：微博@中国警察网 发布了一篇招生标准，”细心“的微博女性们立马发现了其中的一个标准：”女性的计划数不超过总数的15%“</li><li>事件：污言秽语辱骂警察，说”都怪你们不让我们女性当警察做好事“。<ul><li>我不知道她们有没有看过真实的女生报考数量有没有达到15%的标准。</li><li>我也不知道她们之中有没有一个是真正报考或者准备报考的。</li></ul></li></ul><h5 id="辱骂-中国消防"><a href="#辱骂-中国消防" class="headerlink" title="辱骂@中国消防"></a>辱骂@中国消防</h5><p>从中国警察骂到中国消防。微博女拳一贯的污言秽语满嘴喷粪不留口德。后来中国消防挂出来一个辱骂消防员的号，依稀记得好像是三张截图，印象最深的一个图里的微博内容是：”不过您国男消防员也是真的惨，要装备屁都没有，一死就死一群“，看完觉得这被抓是真的不亏，真的是缺乏教育。可是我点开转发一看呢？</p><ul><li><p>拳师纷纷开始洗地，硬说这个人是在可怜中国消防员</p><ul><li><blockquote><p>好家伙，张口就是”您国“，连政治立场都没有确定的人，怎么看出来是在”可怜“消防员的？</p><p>”您国“，”装备屁都没有“，”一死就是一群“，从政治不准确到假数据搞污蔑，到最后的对消防员生命的侮辱，跟我提”可怜消防员“？？？</p></blockquote></li></ul></li></ul><h5 id="侮辱、抹黑中国军人"><a href="#侮辱、抹黑中国军人" class="headerlink" title="侮辱、抹黑中国军人"></a>侮辱、抹黑中国军人</h5><p>有一个军区的微博号，发了一个军人集体婚礼的视频，其中有一个片段是军人们争先恐后抱走自己的新娘。</p><p>被拳师盯上了还能有好下场吗？它们把这场婚礼形容为”男人的原始兽性“，说让它们想到了原始人抢占雌性动物。着实给我恶心吐了，我没想到正常人能想到这样的场面。</p><p>无独有偶，可能是在评论区或者是那个拳师头子的其他微博里面，提到了另一个关于政治的问题，台湾问题。把收复台湾形容成侵略，把这种行为归结为“男人骨子里带有的侵略意识”。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>随着我与之对线的拳师越来越多，我感到越来越累了。起初我以为只是那么一小撮驱虫，后来我发现蛆窝里面实在是太多太多它们的同类了。</p><p>我发现我开始用拳师的思维去看待问题，很多时候我会想，同样的事情如果发生在微博上，或者同样的事情发生在女性身上，微博拳师到底会怎么讹人，以什么角度出拳。</p><p><strong>拳师走到哪里臭到哪里</strong>，但是我不想惹来一身骚，我取关了@田园女权bot，不再关注任何女拳大V，可以避免跟女性有关的话题。</p><p>可是我越来越发现避无可避，任何一个地方都有可能出现它们的身影，也越来越多地平台受到了它们的荼毒。</p><h3 id="微博热搜"><a href="#微博热搜" class="headerlink" title="微博热搜"></a>微博热搜</h3><p>我有段时间没看微博了，即使是这样，也偶尔会被来自微博的恶意气到。</p><p>微博对待热搜的态度是什么样子的？</p><p><strong>凡是关于女性的话题就是很容易上热搜</strong>。</p><p>很多女拳说，“犯罪的都是男的！”。真的吗？有没有可能是因为没有人关心女性犯罪呢？有没有可能是因为女性犯罪不会上热搜呢？有没有可能是因为女性哪怕犯罪了，也会被洗成“她一定是这个吃人家庭的受害者”呢？</p><ul><li><strong>女子抱着孩子拿刀扎前车司机</strong><ul><li>没有热搜</li></ul></li><li><strong>女子持刀抢劫银行</strong><ul><li>没有热搜</li></ul></li><li><strong>女子在街上被泼奶茶</strong><ul><li>热搜！！</li></ul></li></ul><blockquote><p> “什么反转，没有反转。她一定是这个吃人家庭的受害者！”</p><p>鲍毓明案反转，女受害者被发现其实是个骗子，原本是为了骗钱去的。</p><p>可是拳师不让说，拳师说哪怕女性犯罪了，也“一定是这个吃人家庭的受害者”</p></blockquote><h5 id="一些辣眼睛的微博热搜"><a href="#一些辣眼睛的微博热搜" class="headerlink" title="一些辣眼睛的微博热搜"></a>一些辣眼睛的微博热搜</h5><ul><li><p>“少数男性对顶真的看法”</p><ul><li>都说了是少数了，为什么会上热搜？真的有这么多人搜索了吗？凭什么用这所谓的“少数”的看法，来骂所有男性？</li><li>点开热搜，里面清一色都是在骂男人，我第一次体会到什么叫人在家中坐，锅从天上来。</li></ul></li><li><p>“男生是不是没有身材焦虑”</p><ul><li><p>我倒是之前听说了女生关于“身材焦虑”的微博，可是为什么要把这种负面情绪引向男性？</p></li><li><p>热搜第一条微博的评论“他们自信着呢”以及：“他们的问题就是过于自信”</p><ul><li><blockquote><p>什么时候自信也成了一种罪过了？</p></blockquote></li></ul></li></ul></li><li></li></ul><h3 id="让我记忆犹新的拳师（恶毒）发言"><a href="#让我记忆犹新的拳师（恶毒）发言" class="headerlink" title="让我记忆犹新的拳师（恶毒）发言"></a>让我记忆犹新的拳师（恶毒）发言</h3><ul><li><p>”到底要把我们女人社会化到什么样子啊，我们根本就做不了自己“</p><ul><li>这不就是<strong>不融入社会，甚至说带着有色眼镜看社会</strong>的另一种说法吗？自己不融入社会，反倒怪罪别人？</li></ul></li><li><p>”你们男的真的一点都不会跟我们女性产生共情，你们根本不懂我们的生活处境“</p><ul><li><p>如果目的是为了社会和谐，那我当然是支持的，可事实真的是这样吗？</p></li><li><p>我清楚地记得，<strong>乃万和李佳航呼吁善待男性的时候，被骂的好惨</strong>。热评第一更是直接说：”<strong>我就是看不惯那些为男的说好话的</strong>“。好家伙，直接扣了个”男性有罪“的帽子，还不让我们摘；</p></li><li><p>为什么一个群体可以理直气壮的希望别的群体来与自己产生共情？每次我希望她们平等对待男性的时候，我得到了以下几个类似的结果：</p><ul><li><p>”<strong>男的好惨，建议自杀</strong>“</p></li><li><p>”你们有自己共情就够了“</p></li><li><blockquote><p>己所不欲，硬施于人。</p></blockquote></li></ul></li></ul></li><li><p>“你这视频是什么意思，想引导我们女性从小就当牛做马？”</p><ul><li>博主发的视频是一个女孩背起患病的爷爷。</li></ul></li></ul><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 田园女权，微博，极端女拳，境外势力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于React Native</title>
      <link href="/2021/07/17/aboutreactnative/"/>
      <url>/2021/07/17/aboutreactnative/</url>
      
        <content type="html"><![CDATA[<h3 id="先说点闲话："><a href="#先说点闲话：" class="headerlink" title="先说点闲话："></a>先说点闲话：</h3><blockquote><p>ReactNative是一个让人又爱又恨的东西，它的语法我很喜欢，它的简单粗暴我很喜欢，它什么都能做，但好多事情都需要我们自己做；但这不重要，谁还不是为了自己热爱的东西活着呢。</p></blockquote><h3 id="关于这篇笔记"><a href="#关于这篇笔记" class="headerlink" title="关于这篇笔记"></a>关于这篇笔记</h3><blockquote><p>React Native很有趣，我在开发和学习的过程中积攒了很多东西，我想把它记录下来；</p></blockquote><h3 id="关于Expo"><a href="#关于Expo" class="headerlink" title="关于Expo"></a>关于Expo</h3><p>Expo很重要，起初我用它是因为它配置简单，cli安装好之后，只需要一个<code>expo init</code>然后按照提示完成命令，即可创建完成一个项目。后来发现它用起来效率也很不错，我不用每次都等待<code>xcodebuild</code>命令编译iOS项目，它运行在Expo Go App中，不用编译原生代码。</p><p>而且Expo提供了很多框架，非常方便我们使用，比如<code>@expo/vector-icons</code>，使用Iconfont自定义图标也很方便，使用这个框架配合<code>expo-font</code>，很方便的加载自定义字体。我在刚开始研究自定义字体的时候，差点都被<code>react-native-vector-icons</code>搞晕了，我想不通为什么一个自定义图标可以这么麻烦。</p><p>但是弊端也是有的，说是不用编译原生代码，其实也是不能编译。因为Expo项目是运行在Expo Go客户端中的，原生代码的部分已经被“硬编码”了。</p><p>但好在最近Expo做了一个大更新，出了一个叫做<code>custom-dev-client</code>的东西，它可以脱离Expo Go客户端，把任何一个项目编译成一个“类Expo Go”，只需要在第一次运行的时候使用<code>expo run:ios</code>或者<code>expo run:android</code>命令，编译出一个独立的App，以后的每次启动即可使用<code>expo start --dev-client</code>，不需要再次编译原生代码；</p><h4 id="Expo（目前）的弊端"><a href="#Expo（目前）的弊端" class="headerlink" title="Expo（目前）的弊端"></a>Expo（目前）的弊端</h4><p>说完了好处该说坏处了。网上说的什么Api有限制之类的坏处都是假的，只需要切换到bare workflow就行了，真正的问题在与下面这几个，Expo目前被我发现这么几个短板：</p><ul><li><p>不支持<code>react-native-windows</code>以及<code>react-native-macos</code></p><ul><li><blockquote><p>本来我以为bare workflow没有问题，但是真正跑macOS的时候发现跑不了。想一想才发现，程序入口都是expo的，可是expo不支持这两个平台；</p></blockquote></li></ul></li><li><p><code>react-native-web</code>的支持似乎并不友好。</p><ul><li>官方是有<code>expo-web</code>这个东西的，新建一个项目也能在web上跑起来，但是我的两个项目都无法正常运行，原因是<code>Cannot find module: &#39;./RCTNetworking&#39;</code></li></ul></li></ul><h4 id="关于Expo-Workflow"><a href="#关于Expo-Workflow" class="headerlink" title="关于Expo Workflow"></a>关于Expo Workflow</h4><p>Expo本身有一个工作流的概念，分为”Managed”和“Bare”，前者在创建后不会生成Android和iOS的项目文件夹，所有的配置都在<code>app.json</code>里面进行，其实也挺方便，但缺点就是无法后来修改原生项目的代码。后者与直接创建的RN项目并无两样，主要是可以使用Expo的所有功能；</p><p>Managed Workflow可以随时通过<code>expo eject</code>命令生成ios和android两个项目文件夹，退回到bare workflow，所以我觉得项目刚创建的时候使用managed，后面有需求了在eject也是挺好的。后来我发现，其实<code>expo run</code>的时候也会eject，也会直接生成ios和android两个项目文件夹；</p><p>包括像是上面说的<code>custom-dev-client</code>，在bare项目里面配置还挺麻烦的，需要去原生项目里面改代码。但是如果先创建的是managed workflow，使用expo run之后，它会根据配置自动生成代码。</p><h3 id="关于第三方库"><a href="#关于第三方库" class="headerlink" title="关于第三方库"></a>关于第三方库</h3><p>RN想在致力于精简React Core。它现在把很多框架都从自带框架里面剔除了。所以使用第三方库是RN里面一个日常工作。我自己也仿照Flutter和SwiftUI写了很多小组件，包括不限于<code>&lt;Spacer /&gt;</code>, <code>&lt;Row /&gt;</code> <code>&lt;SizedBox /&gt;</code>等。其他常用的第三方库以及其发挥的作用，我记录在下面：</p><ul><li><p>导航器，底部Tab，顶部Tab，Stack，以及抽屉导航等</p><ul><li>现在主要在用<a href="https://reactnavigation.org/">React Navigation</a></li><li>另一个同样强大的框架，<a href="https://wix.github.io/react-native-navigation/docs/before-you-start/">React Native Navigation</a>，这个框架讲道理用起来感觉有一点点奇怪，我没有过多研究，不过它有一点比上面那个做得好，就是自带了Hero动画的支持，只需要很简单的配置，我已经给上面的框架写了Feature Request，希望能早早支持吧。</li></ul></li><li><p>底部弹窗，Bottom Sheet</p><ul><li><blockquote><p>这个框架好曲折，一开始，我就发现了这个<a href="https://gorhom.github.io/react-native-bottom-sheet">React Native Bottom Sheet</a>带有backdrop（背景蒙版），其他的都要自己实现，用了一段时间，我渐渐发现了很多问题，比如没有Web支持，更别提macOS和Windows支持了。后来又发现它对键盘的支持也一般，会出现奇奇怪怪的问题。</p></blockquote></li><li><p>后来发现还是这个<a href="https://jeremybarbet.github.io/react-native-modalize/#/">Modalize</a>好用，键盘支持完美，轻松自定义。</p></li></ul></li><li><p>UI组件库</p><ul><li><a href="https://reactnativepaper.com/">Paper</a>，没得说，这个库遵循Material标准，算是比较优雅，其中用的最多的应该是Modal和Button组件，都还算不错。</li><li>Expo官方介绍的<a href="https://docs.expo.io/guides/userinterface/">UI组件库列表</a>，包括不限于UI Kitten，以及RN UI Lib等</li><li>Expo官方提供的各种框架：<a href="https://docs.expo.io/versions/latest/%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAApp%E5%87%A0%E4%B9%8E%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84Api%E5%92%8C%E6%A1%86%E6%9E%B6%EF%BC%9B">https://docs.expo.io/versions/latest/，包含了创建一个App几乎所有可能会用到的Api和框架；</a></li></ul></li></ul><h3 id="关于开发工具"><a href="#关于开发工具" class="headerlink" title="关于开发工具"></a>关于开发工具</h3><p>很多开发者都喜欢使用VSCode来开发，我还理解不了这种行为，我目前使用VSCode有两个场景，第一是临时打开代码文件，第二是JetBrains系列太卡了，我才会去使用。</p><p>VSCode在开发的时候，它会修改我项目的入口，来用作调试，这一点让我很烦。</p><p>相比之下WebStorm功能强大，再加上我自定义了tsx模板文件以及各种快捷键，用起来真的不错。唯一的问题就是debugger偶尔会连接不上，无法调试，好在目前debug的场景还不是很多。</p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Native </tag>
            
            <tag> TypeScript </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SwiftUI</title>
      <link href="/2021/07/17/swiftui/"/>
      <url>/2021/07/17/swiftui/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先占坑，等有空了再总结</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> SwiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用NSURLProtocol实现网络请求拦截器</title>
      <link href="/2019/07/17/ios-network-interceptor/"/>
      <url>/2019/07/17/ios-network-interceptor/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>最近遇到了一个需求，就是当该用户的登录身份失效了之后，此时不管进行什么操作，调用什么接口，都跳转到登录页面。</p></blockquote><p>那么引申出来的技术需求就是检测app所有的网络返回，一旦服务端同学给的<code>status code == 401</code>，那么</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Apple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS Cameras and Media Capture</title>
      <link href="/2019/05/19/cameras-and-media-capture/"/>
      <url>/2019/05/19/cameras-and-media-capture/</url>
      
        <content type="html"><![CDATA[<h1 id="摄像头与媒体捕捉"><a href="#摄像头与媒体捕捉" class="headerlink" title="摄像头与媒体捕捉"></a>摄像头与媒体捕捉</h1><blockquote><p>本文记录的是苹果官方文档<a href="https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture">Cameras and Media Capture</a>的阅读中文笔记, 以及相关自己的理解.</p><p>本框架用于实现调用iOS设备的音频以及视频输入输出设备, 在屏幕上显示相机的实时预览, 以及拍照等功能.</p></blockquote><span id="more"></span><h2 id="请求媒体捕捉访问权限"><a href="#请求媒体捕捉访问权限" class="headerlink" title="请求媒体捕捉访问权限"></a>请求媒体捕捉访问权限</h2><h5 id="如果你的App要使用摄像头，需要在Info-plist文件的NSCameraUsageDescription指定使用摄像头的原因。"><a href="#如果你的App要使用摄像头，需要在Info-plist文件的NSCameraUsageDescription指定使用摄像头的原因。" class="headerlink" title="如果你的App要使用摄像头，需要在Info.plist文件的NSCameraUsageDescription指定使用摄像头的原因。"></a>如果你的App要使用摄像头，需要在Info.plist文件的NSCameraUsageDescription指定使用摄像头的原因。</h5><h5 id="如果你的App要使用麦克风，需要在Info-plist文件的NSMicrophoneUsageDescription指定使用麦克风的原因。"><a href="#如果你的App要使用麦克风，需要在Info-plist文件的NSMicrophoneUsageDescription指定使用麦克风的原因。" class="headerlink" title="如果你的App要使用麦克风，需要在Info.plist文件的NSMicrophoneUsageDescription指定使用麦克风的原因。"></a>如果你的App要使用麦克风，需要在Info.plist文件的NSMicrophoneUsageDescription指定使用麦克风的原因。</h5><p>请注意，如果没有指定对应API的使用原因，那么你在调用相关API时，系统会将你的App终结。</p><h4 id="检查授权情况"><a href="#检查授权情况" class="headerlink" title="检查授权情况"></a>检查授权情况</h4><h5 id="苹果官方文档建议我们在使用以上这些API之前首先使用-AVCaptureDevice-authorizationStatus-for-检查应用权限的授予情况，如果没有被授予使用权限，需要使用AVCaptureDevice-requestAccess-for-completionHandler-来显示弹框，请求权限。"><a href="#苹果官方文档建议我们在使用以上这些API之前首先使用-AVCaptureDevice-authorizationStatus-for-检查应用权限的授予情况，如果没有被授予使用权限，需要使用AVCaptureDevice-requestAccess-for-completionHandler-来显示弹框，请求权限。" class="headerlink" title="苹果官方文档建议我们在使用以上这些API之前首先使用 AVCaptureDevice.authorizationStatus(for:) 检查应用权限的授予情况，如果没有被授予使用权限，需要使用AVCaptureDevice.requestAccess(for:completionHandler:)来显示弹框，请求权限。"></a>苹果官方文档建议我们在使用以上这些API之前首先使用 <a href="https://developer.apple.com/documentation/avfoundation/avcapturedevice">AVCaptureDevice</a>.<a href="https://developer.apple.com/documentation/avfoundation/avcapturedevice/1624613-authorizationstatus">authorizationStatus(for:)</a> 检查应用权限的授予情况，如果没有被授予使用权限，需要使用<a href="https://developer.apple.com/documentation/avfoundation/avcapturedevice">AVCaptureDevice</a>.<a href="https://developer.apple.com/documentation/avfoundation/avcapturedevice/1624584-requestaccess">requestAccess(for:completionHandler:)</a>来显示弹框，请求权限。</h5><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">switch</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token function">authorizationStatus</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>authorized<span class="token punctuation">:</span> <span class="token comment">// 用户之前已经授予了使用权限</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">setupCaptureSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>notDetermined<span class="token punctuation">:</span> <span class="token comment">// 还没有授予权限</span>    <span class="token comment">// requestAccess方法将会显示系统的权限请求弹窗</span>    <span class="token comment">// 要先配置Info.plist文件，添加NSCameraUsageDescription字段</span>    <span class="token comment">// 先停止sessionQueue的进行</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>sessionQueue<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token function">requestAccess</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> granted <span class="token keyword">in</span>            <span class="token keyword">if</span> granted <span class="token punctuation">&#123;</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>sessionQueue<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">setupCaptureSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>denied<span class="token punctuation">:</span> <span class="token comment">// 被拒绝</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>sessionQueue<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>restricted<span class="token punctuation">:</span> <span class="token comment">// 因为某些原因无法授予权限</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>sessionQueue<span class="token punctuation">.</span><span class="token function">suspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，如果摄像或者拍照不是你的App的主要功能，那么你只能在会使用到相关功能的时候才可以请求权限。</p><h4 id="请求保存媒体权限"><a href="#请求保存媒体权限" class="headerlink" title="请求保存媒体权限"></a>请求保存媒体权限</h4><p>如果是使用上述API拍摄的视频或者照片，请使用<a href="https://developer.apple.com/documentation/photokit/phphotolibrary">PHPhotoLibrary</a>以及<a href="https://developer.apple.com/documentation/photokit/phassetcreationrequest">PHAssetCreationRequest</a>类。这些类会使用到相册的读写权限，所以需要指定NSPhotoLibraryUsageDescription字段。</p><p>如果只是想保存UIImage对象，请使用 <a href="https://developer.apple.com/documentation/uikit/1619125-uiimagewritetosavedphotosalbum">UIImageWriteToSavedPhotosAlbum(<em>:</em>:<em>:</em>:)</a> 方法，此方法会使用到相册的写入权限。请注意，如果图片对象来自AVFoundation（ <a href="https://developer.apple.com/documentation/avfoundation/avcapturephotooutput">AVCapturePhotoOutput</a>），不推荐使用此方法写入，因为UIImage中不会包含图片中的全部信息。</p><p>如果想保存一段视频，请使用 <a href="https://developer.apple.com/documentation/uikit/1619162-uisavevideoatpathtosavedphotosal">UISaveVideoAtPathToSavedPhotosAlbum(<em>:</em>:<em>:</em>:)</a> 方法，此方法同样会使用到相册的写入权限。</p><p>以上两个方法都需要指定NSPhotoLibraryAddUsageDescription字段。</p><h2 id="配置媒体捕获与输出设备"><a href="#配置媒体捕获与输出设备" class="headerlink" title="配置媒体捕获与输出设备"></a>配置媒体捕获与输出设备</h2><p><a href="https://developer.apple.com/documentation/avfoundation/avcapturesession">AVCaptureSession</a>类用于整合输入流（媒体输入设备，比如摄像头，麦克风）和输出流（媒体输出设备，比如相机预览，扬声器等），是输入流与输出流交互的管道。开发者通过<code>AVCaptureConnection</code>类将输入流额输出流绑定。</p><p><a href="https://developer.apple.com/documentation/avfoundation/avcapturedevice">AVCaptureDevice</a>类代表了物理媒体捕获设备，比如相机以及麦克风。</p><p><a href="https://developer.apple.com/documentation/avfoundation/avcapturedeviceinput">AVCaptureDeviceInput</a>类代表一个输入流，它基于一个captureDevice，比如前置相机，话筒等。负责与captureSession交互。</p><p><a href="https://developer.apple.com/documentation/avfoundation/avcaptureoutput">AVCaptureDeviceOutput</a>类代表了一个输出流，这是一个抽象类，它描述的是媒体输出的方式，比如图片输出：<a href="https://developer.apple.com/documentation/avfoundation/avcapturephotooutput">AVCapturePhotoOutput</a>，用于描述的是静态图像，Live Photo等媒体输出方式。</p><p>所以初始化session之后，就是开始配置：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 固定语法，开始AVCaptureSession类的配置</span>captureSession<span class="token punctuation">.</span><span class="token function">beginConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取后置的摄像头</span><span class="token keyword">let</span> videoDevice <span class="token operator">=</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">.</span>builtInWideAngleCamera<span class="token punctuation">,</span>                                          <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">,</span> position<span class="token punctuation">:</span> <span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span><span class="token keyword">guard</span>    <span class="token keyword">let</span> videoDeviceInput <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">AVCaptureDeviceInput</span><span class="token punctuation">(</span>device<span class="token punctuation">:</span> videoDevice<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 在添加输出或者输入流之前必须检查是否可以添加</span>    captureSession<span class="token punctuation">.</span><span class="token function">canAddInput</span><span class="token punctuation">(</span>videoDeviceInput<span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>captureSession<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span>videoDeviceInput<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AVCaptureDevice</code>的可选值有这些：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 内置麦克风</span><span class="token keyword">static</span> <span class="token keyword">let</span> builtInMicrophone<span class="token punctuation">:</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token builtin">DeviceType</span><span class="token comment">// 对于iPhone来说，指的是后置的摄像头</span><span class="token keyword">static</span> <span class="token keyword">let</span> builtInWideAngleCamera<span class="token punctuation">:</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token builtin">DeviceType</span><span class="token comment">// 后置双摄</span><span class="token keyword">static</span> <span class="token keyword">let</span> builtInDualCamera<span class="token punctuation">:</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token builtin">DeviceType</span><span class="token comment">// 这个就不用说了，粪叉以后带出来的TrueDepth摄像头</span><span class="token keyword">static</span> <span class="token keyword">let</span> builtInTrueDepthCamera<span class="token punctuation">:</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token builtin">DeviceType</span><span class="token comment">/// ... </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个captureSession可以配置多个输入以及输出流，比如需求是需要同时调用后置摄像头以及麦克风，你可以这样写：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">captureSession<span class="token punctuation">.</span><span class="token function">beginConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> photoDevice <span class="token operator">=</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">.</span>builtInWideAngleCamera<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">,</span> position<span class="token punctuation">:</span> <span class="token punctuation">.</span>back<span class="token punctuation">)</span><span class="token keyword">let</span> microphoneDevice <span class="token operator">=</span> <span class="token builtin">AVCaptureDevice</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">.</span>builtInMicrophone<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>audio<span class="token punctuation">,</span> position<span class="token punctuation">:</span> <span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> photoDeviceInput <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">AVCaptureDeviceInput</span><span class="token punctuation">(</span>device<span class="token punctuation">:</span> photoDevice<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">let</span> microDeviceInput <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">AVCaptureDeviceInput</span><span class="token punctuation">(</span>device<span class="token punctuation">:</span> microphoneDevice<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  captureSession<span class="token punctuation">.</span><span class="token function">canAddInput</span><span class="token punctuation">(</span>photoDeviceInput<span class="token punctuation">)</span><span class="token punctuation">,</span>  captureSession<span class="token punctuation">.</span><span class="token function">canAddInput</span><span class="token punctuation">(</span>microDeviceInput<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>captureSession<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span>photoDeviceInput<span class="token punctuation">)</span>captureSession<span class="token punctuation">.</span><span class="token function">addInput</span><span class="token punctuation">(</span>microDeviceInput<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一步，添加输出流：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> photoOutput <span class="token operator">=</span> <span class="token function">AVCapturePhotoOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// photoOutput.isLivePhotoCaptureEnabled = photoOutput.isLivePhotoCaptureSupported</span><span class="token comment">// photoOutput.isDepthDataDeliveryEnabled = photoOutput.isDepthDataDeliverySupported</span><span class="token comment">// photoOutput.isPortraitEffectsMatteDeliveryEnabled = photoOutput.isPortraitEffectsMatteDeliverySupported</span><span class="token comment">// 需要注意的是，如果你的应用支持切换前后摄像头的功能，以上这些属性都需要重新设置一次。</span><span class="token keyword">guard</span> captureSession<span class="token punctuation">.</span><span class="token function">canAddOutput</span><span class="token punctuation">(</span>photoOutput<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>captureSession<span class="token punctuation">.</span>sessionPreset <span class="token operator">=</span> <span class="token punctuation">.</span>photocaptureSession<span class="token punctuation">.</span><span class="token function">addOutput</span><span class="token punctuation">(</span>photoOutput<span class="token punctuation">)</span>captureSession<span class="token punctuation">.</span><span class="token function">commitConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出并不依赖于硬件，所以只需要添加一个输出流，配置完成之后调用<code>commitConfiguration</code>。这里只是进行了一个最基础的captureSession的配置，一般来说，只需要一个输入以及输出流，一个流程就算是走通了。</p><p>视频格式的媒体捕获，对应的输出类型是<a href="https://developer.apple.com/documentation/avfoundation/avcapturemoviefileoutput"><code>AVCaptureMovieFileOutput</code></a>。</p><p>####显示相机预览 </p><p>实时预览到相机捕获到的画面，是基于<a href="https://developer.apple.com/documentation/avfoundation/avcapturevideopreviewlayer">AVCaptureVideoPreviewLayer</a>类，它是<code>CALayer</code>的子类。它通过<code>session</code>属性与captureSession交互。</p><p>你可以以直接操作<code>CALayer</code>的方式，初始化previewLayer，设置<code>session</code>属性，然后<code>self.view.layer.addSubLayer(previewLayer)</code>的方式使用，也可以：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 苹果官方Demo给出的方案</span><span class="token keyword">class</span> <span class="token class-name">PreviewView</span><span class="token punctuation">:</span> <span class="token builtin">UIView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">class</span> <span class="token class-name">var</span> layerClass<span class="token punctuation">:</span> <span class="token builtin">AnyClass</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token builtin">AVCaptureVideoPreviewLayer</span><span class="token punctuation">.</span><span class="token keyword">self</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> videoPreviewLayer<span class="token punctuation">:</span> <span class="token builtin">AVCaptureVideoPreviewLayer</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> layer <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">AVCaptureVideoPreviewLayer</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TakePhotoViewController</span><span class="token punctuation">:</span> <span class="token builtin">UIViewController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> videoPreviewView<span class="token punctuation">:</span> <span class="token builtin">PreviewView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">PreviewView</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">loadView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> previewView <span class="token operator">=</span> <span class="token function">PreviewView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token builtin">CGRect</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span>        <span class="token comment">// 配置预览页面的显示模式，类似于UIView的ContentMode</span>        previewView<span class="token punctuation">.</span>videoGravity <span class="token operator">=</span> <span class="token punctuation">.</span>resize        <span class="token keyword">self</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是设置session：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">self</span><span class="token punctuation">.</span>videoPreviewView<span class="token punctuation">.</span>videoPreviewLayer<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>captureSession<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>请注意，如果你的拍照页面支持横向拍摄的话，请使用<code>AVCaptureVideoPreviewLayer</code>的connection属性来获得当前设备拍摄朝向。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 在进入sessionQueue之前取得这个属性，是为了确保UI级别的操作都在主线程进行，session的操作都在sessionQueue进行。</span><span class="token keyword">let</span> videoPreviewLayerOrientation <span class="token operator">=</span> videoPreviewView<span class="token punctuation">.</span>videoPreviewLayer<span class="token punctuation">.</span>connection<span class="token operator">?</span><span class="token punctuation">.</span>videoOrientationsessionQueue<span class="token punctuation">.</span>async <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> photoOutputConnection <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>photoOutput<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token punctuation">.</span>video<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                photoOutputConnection<span class="token punctuation">.</span>videoOrientation <span class="token operator">=</span> videoPreviewLayerOrientation<span class="token operator">!</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="跑起来吧"><a href="#跑起来吧" class="headerlink" title="跑起来吧"></a>跑起来吧</h4><p>至此，基本的配置工作已经完成了，接下来就是让数据流在输入以及输出流中跑起来。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">self</span><span class="token punctuation">.</span>captureSession<span class="token punctuation">.</span><span class="token function">startRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 调用了startRunning()方法之后，即可以在设置的videoPreviewLayer上预览到实时的相机效果。</span><span class="token comment">// startRunning()以及stopRunning()方法都会阻塞当前线程，请确保是在sessionQueue里进行。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h4><p>退出页面时，请记得调用captureSession的<code>stopRunning()</code>方法，因为应用在后台时调用相机，是被苹果禁止的，这也是未越狱的苹果设备上，没有“偷拍应用”的原因。</p><p>另外需要注意的是，硬件的调用有可能被其他系统行为打断（比如有电话进来）。</p><p><code>AVCaptureSession</code>类提供了一系列的<code>NotificationName</code>，其中包括session开始运行，结束运行，或者session被打断：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// startRunning()调用完成之后发送此通知</span><span class="token keyword">static</span> <span class="token keyword">let</span> <span class="token builtin">AVCaptureSessionDidStartRunning</span><span class="token punctuation">:</span> <span class="token builtin">NSNotification</span><span class="token punctuation">.</span><span class="token builtin">Name</span><span class="token comment">// stopRunning() 调用完成之后发送</span><span class="token keyword">static</span> <span class="token keyword">let</span> <span class="token builtin">AVCaptureSessionDidStopRunning</span><span class="token punctuation">:</span> <span class="token builtin">NSNotification</span><span class="token punctuation">.</span><span class="token builtin">Name</span><span class="token comment">// session被打断，通知内的`userInfo`会带有AVCaptureSessionInterruptionReasonKey字段，其值是枚举值的rawValue，标识着被打断的原因。</span>@<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token builtin">InterruptionReason</span> <span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当前应用被退出到后台</span>        <span class="token keyword">case</span> videoDeviceNotAvailableInBackground<span class="token comment">// 被其他应用占用了音配输入设备，比如来电话了，或者系统闹铃响了</span>        <span class="token keyword">case</span> audioDeviceInUseByAnotherClient<span class="token comment">// 被其他captureSession占用了输入设备</span>        <span class="token keyword">case</span> videoDeviceInUseByAnotherClient<span class="token comment">// "MultipleForegroundApps"一般指的是iPad或者macOS上的分屏功能</span>        <span class="token keyword">case</span> videoDeviceNotAvailableWithMultipleForegroundApps<span class="token comment">// 被系统强制关闭</span>        @<span class="token function">available</span><span class="token punctuation">(</span>iOS <span class="token number">11.1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> videoDeviceNotAvailableDueToSystemPressure    <span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">let</span> <span class="token builtin">AVCaptureSessionWasInterrupted</span><span class="token punctuation">:</span> <span class="token builtin">NSNotification</span><span class="token punctuation">.</span><span class="token builtin">Name</span><span class="token comment">// “打断”结束了</span><span class="token keyword">static</span> <span class="token keyword">let</span> <span class="token builtin">AVCaptureSessionInterruptionEnded</span><span class="token punctuation">:</span> <span class="token builtin">NSNotification</span><span class="token punctuation">.</span><span class="token builtin">Name</span><span class="token builtin">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span>                                        selector<span class="token punctuation">:</span> #<span class="token function">selector</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>sessionWasInterrupted<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        name<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">AVCaptureSessionWasInterrupted</span><span class="token punctuation">,</span>                                        object<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>captureSession<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token atrule">@objc</span> <span class="token keyword">func</span> <span class="token function">sessionWasInterrupted</span><span class="token punctuation">(</span><span class="token number">_</span> note<span class="token punctuation">:</span> <span class="token builtin">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// </span>    <span class="token keyword">if</span> <span class="token keyword">let</span> reasonIntegerValue <span class="token operator">=</span> notification<span class="token punctuation">.</span>userInfo<span class="token operator">?</span><span class="token punctuation">[</span><span class="token builtin">AVCaptureSessionInterruptionReasonKey</span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>    <span class="token keyword">let</span> reason <span class="token operator">=</span> <span class="token builtin">AVCaptureSession</span><span class="token punctuation">.</span><span class="token function">InterruptionReason</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> reasonIntegerValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> reason <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拍摄"><a href="#拍摄" class="headerlink" title="拍摄"></a>拍摄</h3><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>创建一个<code>AVCapturePhotoSettings</code>类，并配置相关设置。这些设置将在拍照时使用，比如拍照时是否打开闪光灯等属性；</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> capturePhotoSettings <span class="token operator">=</span> <span class="token function">AVCapturePhotoSettings</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">AVVideoCodecKey</span><span class="token punctuation">:</span> <span class="token builtin">AVVideoCodecType</span><span class="token punctuation">.</span>jpeg<span class="token punctuation">]</span><span class="token punctuation">)</span>capturePhotoSettings<span class="token punctuation">.</span>isAutoRedEyeReductionEnabled <span class="token operator">=</span> <span class="token boolean">true</span>capturePhotoSettings<span class="token punctuation">.</span>isHighResolutionPhotoEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// 接下来应该是调用AVCapturePhotoOutput的capturePhoto方法</span>photoOutput<span class="token punctuation">.</span><span class="token function">capturePhoto</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> capturePhotoSettings<span class="token punctuation">,</span> delegate<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Next-Step，使用NSData或者将照片保存到相册"><a href="#Next-Step，使用NSData或者将照片保存到相册" class="headerlink" title="Next Step，使用NSData或者将照片保存到相册"></a>Next Step，使用NSData或者将照片保存到相册</h5><p>遵循<code>AVCapturePhotoCaptureDelegate</code>并实现相关代理方法。一般来说我们只需要关心拍照结果：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">photoOutput</span><span class="token punctuation">(</span><span class="token number">_</span> output<span class="token punctuation">:</span> <span class="token builtin">AVCapturePhotoOutput</span><span class="token punctuation">,</span> didFinishProcessingPhoto photo<span class="token punctuation">:</span> <span class="token builtin">AVCapturePhoto</span><span class="token punctuation">,</span> error<span class="token punctuation">:</span> <span class="token builtin">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// photo.fileDataRepresentation()可用于获得拍照得到的NSData对象，可用于转化UIImage</span>    <span class="token comment">// 请求相册权限，前文说了我们应该只在使用到相关功能的时候才会请求相关权限</span>    <span class="token keyword">guard</span> error <span class="token operator">==</span> <span class="token constant">nil</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Error capturing photo: <span class="token interpolation"><span class="token delimiter variable">\(</span>error<span class="token operator">!</span><span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>    <span class="token builtin">PHPhotoLibrary</span><span class="token punctuation">.</span>requestAuthorization <span class="token punctuation">&#123;</span> status <span class="token keyword">in</span>        <span class="token keyword">guard</span> status <span class="token operator">==</span> <span class="token punctuation">.</span>authorized <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>                <span class="token builtin">PHPhotoLibrary</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">performChanges</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">// Add the captured photo's file data as the main resource for the Photos asset.</span>            <span class="token keyword">let</span> creationRequest <span class="token operator">=</span> <span class="token builtin">PHAssetCreationRequest</span><span class="token punctuation">.</span><span class="token function">forAsset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            creationRequest<span class="token punctuation">.</span><span class="token function">addResource</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token punctuation">.</span>photo<span class="token punctuation">,</span> data<span class="token punctuation">:</span> photo<span class="token punctuation">.</span><span class="token function">fileDataRepresentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>handlePhotoLibraryError<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>AVCapturePhotoCaptureDelegate</code>的其他代理方法是用来追踪拍照进度的，分别代表 开始曝光，结束曝光，开始处理，结束处理等时间点。</p><p>若要拍摄Live Photo，请查看：<a href="https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/capturing_still_and_live_photos/capturing_and_saving_live_photos"><strong>官方文档</strong></a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS User Notifications</title>
      <link href="/2019/05/19/usernotifications/"/>
      <url>/2019/05/19/usernotifications/</url>
      
        <content type="html"><![CDATA[<h1 id="通知中心（UNUserNotifications）"><a href="#通知中心（UNUserNotifications）" class="headerlink" title="通知中心（UNUserNotifications）"></a>通知中心（UNUserNotifications）</h1><blockquote><p>本框架记录的是苹果官方文档<a href="https://developer.apple.com/documentation/usernotifications">UserNotifications</a>的阅读中文笔记, 以及相关自己的理解.</p><p>本框架用于实现iOS APNs在iOS客户端的内容, 以及推送UI的定制.</p></blockquote><span id="more"></span><h2 id="请求通知权限"><a href="#请求通知权限" class="headerlink" title="请求通知权限"></a>请求通知权限</h2><blockquote><p>在App启动时请求授权。</p><p>Make your authorization request during your app’s launch cycle.</p></blockquote><p>苹果官方文档要求我们把请求权限的代码写在App启动后的相关方法内。</p><p>使用<a href="https://developer.apple.com/documentation/usernotifications/unusernotificationcenter">UNUserNotificationCenter</a>来请求通知权限。<code>.current()</code>方法用以获取此类的单例对象。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token builtin">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 请求 显示通知，播放通知声音 的权限</span>center<span class="token punctuation">.</span><span class="token function">requestAuthorization</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>alert<span class="token punctuation">,</span> <span class="token punctuation">.</span>sound<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>granted<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检查已请求权限的可用性"><a href="#检查已请求权限的可用性" class="headerlink" title="检查已请求权限的可用性"></a>检查已请求权限的可用性</h3><p>用户在第一次请求通知权限之后，后期是可以在系统设置里修改的。用户可以分别控制是否允许你的App开启通知声音，通知横幅，App角标等权限。</p><p>检查权限所以使用的相关依赖依然是<code>UNUserNotificationCenter</code>。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token builtin">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span>center<span class="token punctuation">.</span>getNotificationSettings <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>settings<span class="token punctuation">)</span> <span class="token keyword">in</span>                                <span class="token keyword">guard</span> settings<span class="token punctuation">.</span>authorizationStatus <span class="token operator">==</span> <span class="token punctuation">.</span>authorized <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>    <span class="token comment">/// 是否被允许在锁屏显示通知,取值enabled/disabled</span>settings<span class="token punctuation">.</span>lockScreenSetting<span class="token comment">/// 是否允许显示弹窗</span>settings<span class="token punctuation">.</span>alertSetting<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发送本地通知"><a href="#发送本地通知" class="headerlink" title="发送本地通知"></a>发送本地通知</h2><p>推送一个本地通知主要分为以下几步：</p><ol><li>创建<a href="https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent"><code>UNMutableNotificationContent</code></a>对象，此对象用于描述通知的内容信息，比如标题和消息体。</li><li>创建<a href="https://developer.apple.com/documentation/usernotifications/unnotificationtrigger"><code>UNNotificationTrigger</code></a>对象（可选）。此对象用于指定通知的触发方式，比如具体时间，具体地点，甚至时间周期。</li><li>创建<a href="https://developer.apple.com/documentation/usernotifications/unnotificationrequest"><code>UNNotificationRequest</code></a>对象，此对象用于描述一个通知请求，请求会带上以上创建的两个对象。</li><li>提交通知请求</li></ol><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> notificationContent <span class="token operator">=</span> <span class="token function">UNMutableNotificationContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>notificationContent<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"通知标题"</span>notificationContent<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"通知内容"</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token function">DateComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>date<span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token number">8</span>date<span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">/// 在每天的8:30分，触发此通知</span><span class="token keyword">let</span> trigger <span class="token operator">=</span> <span class="token function">UNCalendarNotificationTrigger</span><span class="token punctuation">(</span>dateMatching<span class="token punctuation">:</span> date<span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">/// identitier用于保证request的唯一性，以后可用于取消通知时使用。</span><span class="token comment">/// 如果trigger参数为nil，则此通知立即发出。</span><span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">UNNotificationRequest</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uuidString<span class="token punctuation">,</span>             content<span class="token punctuation">:</span> notificationContent<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> trigger<span class="token punctuation">)</span><span class="token builtin">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">if</span> error <span class="token operator">!=</span> <span class="token constant">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// pass</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定制通知行为"><a href="#定制通知行为" class="headerlink" title="定制通知行为"></a>定制通知行为</h2><h3 id="Actionable-notifications"><a href="#Actionable-notifications" class="headerlink" title="Actionable notifications"></a>Actionable notifications</h3><p><img src="/imgs/NotificationsUI/image-20190311101808714.png" alt="image-20190311101808714"></p><h4 id="发送一个本地Actionable-Notification"><a href="#发送一个本地Actionable-Notification" class="headerlink" title="发送一个本地Actionable Notification"></a>发送一个本地Actionable Notification</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">/// identifier是此action的唯一标识符，title就是按钮的标题，options用于指定此按钮的一些行为，比如.authenticationRequired表示必须手机在解锁状态才能显示此按钮</span><span class="token keyword">let</span> acceptAction <span class="token operator">=</span> <span class="token function">UNNotificationAction</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string">"ACCEPT_ACTION"</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Accept"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>authenticationRequired<span class="token punctuation">)</span><span class="token comment">/// .destructive表示按钮具有破坏性行为，按钮会显示红色</span><span class="token keyword">let</span> declineAction <span class="token operator">=</span> <span class="token function">UNNotificationAction</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string">"DECLINE_ACTION"</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Decline"</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span><span class="token comment">/// identifier是此通知类型的标识符，当通知(aps)的categoryIdentifier等于此值时，此通知类型会被应用，此通知类型包含两个按钮</span><span class="token keyword">let</span> actionCategory <span class="token operator">=</span> <span class="token function">UNNotificationCategory</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string">"ACTION_CATEGORY"</span><span class="token punctuation">,</span> actions<span class="token punctuation">:</span> <span class="token punctuation">[</span>acceptAction<span class="token punctuation">,</span> <span class="token punctuation">,</span> declineAction<span class="token punctuation">]</span><span class="token punctuation">,</span> intentIdentifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hiddenPreviewsBodyPlaceholder<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>allowInCarPlay<span class="token punctuation">)</span><span class="token builtin">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNotificationCategories</span><span class="token punctuation">(</span><span class="token punctuation">[</span>actionCategory<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的作用，注册一个notificationCategory，该category的标识符为<code>ACTION_CATEGORY</code>，本地通知或者远程通知都可以指定标识符，用于指定该通知响应的notificationCategory。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token function">UNMutableNotificationContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>content<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"测试通知标题"</span>content<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"测试通知内容"</span><span class="token comment">/// 发送此通知，即可触发上面添加的两个按钮，这里要保证categoryIdentifier和之前注册的时候填写的一致</span>content<span class="token punctuation">.</span>categoryIdentifier <span class="token operator">=</span> <span class="token string">"ACTION_CATEGORY"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理通知按钮点击事件"><a href="#处理通知按钮点击事件" class="headerlink" title="处理通知按钮点击事件"></a>处理通知按钮点击事件</h4><p>要处理通知按钮的点击行为，用户必须在程序启动完成之前注册代理，代理是<code>UNUserNotificationCenterDelegate</code>类型的对象，否则可能会错过程序启动时传入的通知。</p><p>实现<code>optional func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&gt; Void)</code>方法，并根据带来的通知处理结果，来规划按钮的点击逻辑。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">userNotificationCenter</span><span class="token punctuation">(</span><span class="token number">_</span> center<span class="token punctuation">:</span> <span class="token builtin">UNUserNotificationCenter</span><span class="token punctuation">,</span> didReceive response<span class="token punctuation">:</span> <span class="token builtin">UNNotificationResponse</span><span class="token punctuation">,</span> withCompletionHandler completionHandler<span class="token punctuation">:</span> @escaping <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> userInfo <span class="token operator">=</span> response<span class="token punctuation">.</span>notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>userInfo    <span class="token comment">/// 这个就是点击的按钮的identifier</span>    <span class="token keyword">let</span> actionIdentifier <span class="token operator">=</span> response<span class="token punctuation">.</span>actionIdentifier        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token function">completionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接收远程通知"><a href="#接收远程通知" class="headerlink" title="接收远程通知"></a>接收远程通知</h2><p>使远程通知也可以显示自定义按钮，后端开发人员需要保证发送来的通知内容与这个类似:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"aps"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*这里的category等于上面写的categoryIdentifier*/</span>        <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"ACTION_CATEGORY"</span><span class="token punctuation">,</span>        <span class="token property">"alert"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"通知标题"</span><span class="token punctuation">,</span>            <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"通知内容"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token property">"field1"</span><span class="token operator">:</span><span class="token string">"message"</span><span class="token punctuation">,</span>    <span class="token property">"field2"</span><span class="token operator">:</span><span class="token string">"message"</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要<code>payload</code>内的<code>category</code>字段与App内置对应的的<code>categoryIdentifier</code>匹配，收到此通知时下拉或者重按，即可出现按钮。</p><h2 id="处理通知-前台"><a href="#处理通知-前台" class="headerlink" title="处理通知(前台)"></a>处理通知(前台)</h2><p>在前台的时候收到通知会回调这个方法：<a href="dash-apple-api://load?topic_id=1649518&language=swift">userNotificationCenter(_:willPresent:withCompletionHandler:)</a>，请注意，是<strong>收到通知</strong>而非点击通知。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">userNotificationCenter</span><span class="token punctuation">(</span><span class="token number">_</span> center<span class="token punctuation">:</span> <span class="token builtin">UNUserNotificationCenter</span><span class="token punctuation">,</span> willPresent notification<span class="token punctuation">:</span> <span class="token builtin">UNNotification</span><span class="token punctuation">,</span> withCompletionHandler completionHandler<span class="token punctuation">:</span> @escaping <span class="token punctuation">(</span><span class="token builtin">UNNotificationPresentationOptions</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>categoryIdentifier <span class="token operator">==</span> <span class="token string">"ACTION_CATEGORY"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> field1 <span class="token operator">=</span> notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>userInfo<span class="token punctuation">[</span><span class="token string">"field1"</span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">String</span>    <span class="token keyword">let</span> field2 <span class="token operator">=</span> notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>userInfo<span class="token punctuation">[</span><span class="token string">"field2"</span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">String</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// completionHandler一定要调用，这个回调的参数决定了收到通知后的系统行为</span>  <span class="token comment">// completionHandler([])表示收到通知后没有系统动作</span>  <span class="token comment">// completionHandler([.sound])表示播放通知声音</span>  <span class="token function">completionHandler</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>sound<span class="token punctuation">,</span> <span class="token punctuation">.</span>badge<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在App收到通知之前，修改通知的内容-payload"><a href="#在App收到通知之前，修改通知的内容-payload" class="headerlink" title="在App收到通知之前，修改通知的内容(payload)"></a>在App收到通知之前，修改通知的内容(payload)</h2><p>要实现这个类似于”拦截通知”的功能，你需要新建一个<strong>Notification Service Extension</strong>。</p><p>在Xcode项目里，点选菜单栏File -&gt; New -&gt; Target， 然后选择<strong>Notification Service Extension</strong>，填写信息并完成创建。</p><p>在Xcode为你新建的文件模板里，已经实现了基本的推送文案修改。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">/// 使用此方法来修改通知信息，将最终的结果通过contentHandler回传给系统</span><span class="token comment">/// 你可以在此方法内下载图片，或者电影等信息</span><span class="token comment">/// 此方法有（不超过30s的)时间限制，需要在时限内调用contentHandler</span><span class="token keyword">func</span> <span class="token function">didReceive</span><span class="token punctuation">(</span><span class="token number">_</span> request<span class="token punctuation">:</span> <span class="token builtin">UNNotificationRequest</span><span class="token punctuation">,</span> withContentHandler contentHandler<span class="token punctuation">:</span> @escaping <span class="token punctuation">(</span><span class="token builtin">UNNotificationContent</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/// 保存contentHandler,以便于下面那个方法内调用</span>  <span class="token keyword">self</span><span class="token punctuation">.</span>contentHandler <span class="token operator">=</span> contentHandler  <span class="token keyword">let</span> newContent <span class="token operator">=</span> request<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">mutableCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">/// 下载完成后配置此条通知的附件📎,可用于显示图片,视频,或者音频等内容</span>  <span class="token comment">///  参数里的URL必须是fileURL</span>  <span class="token comment">///  options字典用于定义一些额外的配置,比如图片缩略图的裁剪区域等,具体配置定义在https://developer.apple.com/documentation/usernotifications/unnotificationattachment</span>  <span class="token keyword">let</span> attachment <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">UNNotificationAttachment</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token function">UDID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>udidString<span class="token punctuation">,</span> url <span class="token constant">URL</span><span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>  newContent<span class="token punctuation">.</span>attachments <span class="token operator">=</span> <span class="token punctuation">[</span>attachment<span class="token punctuation">]</span><span class="token comment">/// 最后一定要调用contentHandler</span><span class="token punctuation">&#125;</span><span class="token comment">/// 如果contentHandler在时限内没有调用，系统将会通过此方法通知app</span><span class="token comment">/// 此方法内应当尽可能快的调用contentHandler，</span><span class="token keyword">func</span> <span class="token function">serviceExtensionTimeWillExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token keyword">let</span> contentHandler <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>contentHandler <span class="token punctuation">&#123;</span>    <span class="token function">contentHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意,系统只会在你的APNs Payload内包含下列信息时,才会执行此拓展:</p><ul><li>必须包含<code>mutable-content</code>,且value为1;</li><li>必须包含<code>alert</code>字典,且其中的<code>body</code>或者<code>title</code>必须有值;</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"aps"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"alert"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"通知标题"</span><span class="token punctuation">,</span>      <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"通知内容"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"mutable-content"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"..."</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自定义通知UI"><a href="#自定义通知UI" class="headerlink" title="自定义通知UI"></a>自定义通知UI</h1><p>要实现这个功能,你需要新建一个<strong>Notification Content Extension</strong>.</p><p>在Xcode项目里，点选菜单栏File -&gt; New -&gt; Target， 然后选择<strong>Notification Content Extension</strong>，填写信息并完成创建。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># The file list we got after creation.├── Base.lproj│   └── MainInterface.storyboard├── Info.plist└── NotificationViewController.swift<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是注意事项:</p><ul><li>你不能在Extension里面自己新建ViewController文件,你也不能再storyboard里面新建scene,<strong>一个Notification Content Extension只能对应一种Notification Category.</strong></li><li>你可以用新建多个Notification Content Extension的方式来实现多种通知UI的定制,需要注意的是,多个不同的extension,你需要保证所支持的Notification Category的唯一性.</li></ul><h2 id="修改UI样式"><a href="#修改UI样式" class="headerlink" title="修改UI样式"></a>修改UI样式</h2><p>你可以在<code>MainInterface.storyboard</code>或者<code>NotificationViewController.swift</code>中自定义UI,内容的高度可以根据autolayout自适应.</p><p>UI的编写就跟一般的UIViewController是一样的,需要注意的应该就是这里的ViewController高度应该是刚刚好跟内容大小一致的,所以说对AutoLayout有一定的要求.</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">/// 此方法将会在第一次下拉通知以及后续有其他相关通知到达之后,被调用</span><span class="token keyword">func</span> <span class="token function">didReceive</span><span class="token punctuation">(</span><span class="token number">_</span> notification<span class="token punctuation">:</span> <span class="token builtin">UNNotification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> notificationTitle <span class="token operator">=</span> notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>title  <span class="token keyword">let</span> notificationBody <span class="token operator">=</span> notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>body  <span class="token keyword">let</span> attachments <span class="token operator">=</span> notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>attachments  <span class="token comment">/// 根据通知标题,通知内容,以及附件等信息来配置通知的详情UI</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为你的自定义UI指定所支持的通知类型"><a href="#为你的自定义UI指定所支持的通知类型" class="headerlink" title="为你的自定义UI指定所支持的通知类型"></a>为你的自定义UI指定所支持的通知类型</h2><p>前面说了,我们可以用<a href="https://developer.apple.com/documentation/usernotifications/unnotificationcategory">UNNotificationCategory</a>.<a href="https://developer.apple.com/documentation/usernotifications/unnotificationcategory/1649276-identifier">identifier</a>来确定每一种通知的唯一性.</p><p>当系统收到通知时,系统会匹配NotificationCategory的identifier,来确认其是否存在一个自定义通知UI.</p><p>在<code>Info.plist</code>文件中,使用<code>UNNotificationExtensionCategory</code>字段指定此extension所支持的Notification Categroy.</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>NSExtension<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>NSExtensionAttributes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 模板里面默认的此字段的类型是String,可以根据实际场景改为String Array --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>UNNotificationExtensionCategory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>myNotificationCategory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--自己手动改成String Array,可以填写多个Notification Content Identifier--></span>      <span class="token comment">&lt;!--当任意一个identifier被匹配到时,当前extension都会被启动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>UNNotificationExtensionCategory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>myNotificationCategory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>myNotificationCategory1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>myNotificationCategory2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用XCUITest进行UI自动化</title>
      <link href="/2019/04/25/uiautotesting/"/>
      <url>/2019/04/25/uiautotesting/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift响应式框架：RxSwift使用介绍</title>
      <link href="/2017/10/29/rxswift-introduce/"/>
      <url>/2017/10/29/rxswift-introduce/</url>
      
        <content type="html"><![CDATA[<p>响应式框架<code>RxSwift</code>：</p><p><a href="https://github.com/ReactiveX/RxSwift"><strong>RxSwift: ReactiveX for Swift</strong></a>，ReactiveX框架的Swift版本。响应式编程框架。基于事件（或者信号）的编程思想。</p><p>Rx把各种值的变化，理解为一种事件，并构建一个序列用于传递这些事件，然后可以基于序列对各种事件进行<em>合并</em>，<em>绑定</em>，<em>限流</em>，<em>订阅</em> 等等操作。</p><span id="more"></span><p>比如，商城APP中都会有一个购物车页面，页面的<code>TabBar</code>要显示购物车商品的数量，并且这个购物车数量可能在多个页面共享，那么此时我们可以这样写：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">let</span> shoppingCartNumber <span class="token operator">=</span> <span class="token function">BehaviorRelay</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 加入购物车之后更新购物车数量</span><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function">onAddedShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    shoppingCartNumber<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cartNumber<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 在所有需要监测购物车数量变化的页面，添加以下代码</span>shoppingCartNumber<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> cartNumber <span class="token keyword">in</span>                                     <span class="token comment">// 更新购物车角标数量</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disposed</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> disposeBag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>未完待续</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Swift </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python搭建简单服务器</title>
      <link href="/2016/09/20/create-simple-web-app-using-python/"/>
      <url>/2016/09/20/create-simple-web-app-using-python/</url>
      
        <content type="html"><![CDATA[<p>本文所使用的python版本是<code>python3</code>,那么对应的pip版本也是<code>pip3</code> .如果你是用的是python2.x的话,那么对应的终端指令就需要把<code>python3</code>换为<code>python</code>,<code>pip3</code>换为<code>pip</code>.</p><h2 id="最简-简-单-陋-的方式"><a href="#最简-简-单-陋-的方式" class="headerlink" title="最简(简)单(陋)的方式"></a>最简(简)单(陋)的方式</h2><h3 id="使用WSGI-Web-Server-Gateway-Interface"><a href="#使用WSGI-Web-Server-Gateway-Interface" class="headerlink" title="使用WSGI(Web Server Gateway Interface)"></a>使用WSGI(Web Server Gateway Interface)</h3><p>Python内置支持此模块,实现WSGI接口也非常的容易,只需要开发者实现一个函数,这里是一个Web版本的”Hello,World”:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">application</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    start_response<span class="token punctuation">(</span><span class="token string">'200 OK'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">b'&lt;h1>Hello, web!&lt;/h1>'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的application()方法就是符合WSGI接口标准的HTTP处理函数,此方法接收两个参数,第一个是一个接收HTTP请求参数的<code>dict</code>,第二个参数是一个发送HTTP响应的函数,方法内调用<code>start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])</code>即发送的HTTP响应的Header,方法内的返回值就是单次HTTP请求所得到的返回值.</p><p>编写app.py文件,内容如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wsgiref<span class="token punctuation">.</span>simple_server <span class="token keyword">import</span> make_server<span class="token comment"># 创建一个WSGIServer对象,IP地址为空,也就是本机地址,端口是8000,处理函数是application方法</span>httpd <span class="token operator">=</span> make_server<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">,</span>application<span class="token punctuation">)</span><span class="token comment"># 启动服务器</span>httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时在终端下执行此命令:</p><pre class="line-numbers language-none"><code class="language-none">python3 app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时这个简易的服务器就启动了,可在Chrome下输入域名<code>localhost:8000</code>,如无意外,页面内会有<code>Hello,web</code>这个h1标签产生的文字.</p><p>但是,此时如果想增加一些灵活性,比如说改为<code>localhose:8000/signin</code>返回登录页面,此时需要做的就是在application方法内通过<code>environ[&#39;PATH_INFO&#39;]</code>来获得访问路径,判断访问路径来返回不同的html,作为一个像我这样懒的人,我想说—–<em>NO WAY!!</em></p><p>下面是更简单的方式实现:</p><span id="more"></span><h2 id="使用Web框架"><a href="#使用Web框架" class="headerlink" title="使用Web框架"></a>使用Web框架</h2><h3 id="使用Flask"><a href="#使用Flask" class="headerlink" title="使用Flask"></a>使用Flask</h3><p>使用之前需要先安装flask,终端执行:<code>pip3 install flask</code>,别忘了如果你使用了<code>virtualenv</code>虚拟环境的话需要先进入虚拟的环境再安装,否则会被安装到系统默认的python环境中.</p><p>我们需要这些模块:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有了flask只有,如何解决上面的访问路径的问题呢?其实我们可以在方法定义的时候,就决定调用此方法的请求路径(path)以及请求方法(method),比如说是主页的话,可以这样:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"&lt;h1>Home&lt;/h1>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>app.route()</code>装饰器的两个参数分别设定了访问路径,以及允许的请求方法.</p><p>但是,注意这里方法的返回值是直接把HTML字符串返回,难道需要把每个页面需要的HTML作为字符串放在python文件内吗? 不考虑其他专业性的问题,还是那句话,作为一个像我这么懒的人,我想说<em>NO WAY!!</em>.</p><h4 id="模板技术"><a href="#模板技术" class="headerlink" title="模板技术"></a>模板技术</h4><p>首先需要把所有页面的HTML代码写在独立的文件内,python内部使用的时候只需要引用文件并传入相应参数即可,对应这里的话就是把方法的返回值替换为<code>return render_template(&#39;home.html&#39;)</code>,这里的<code>home.html</code>文件内部把所需要的HTML内容放入即可.</p><p>那么剩下的代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/signin'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">signin_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/signin'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">signin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>    password <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token keyword">and</span> password <span class="token operator">==</span> <span class="token string">'password'</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'signin-ok.html'</span><span class="token punctuation">,</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'Bad username or password'</span><span class="token punctuation">,</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里登录与登录失败的时候,做了点小操作,重用了同一个页面,这是<code>form.html</code>的文件内容,注意这里在render_template()的时候使用关键字参数传入了参数,这些参数在html文件里面都有,对应的参数位置,flask默认的模板是jinja2,所以需要安装jinja2:</p><pre class="line-numbers language-none"><code class="language-none">$ pip install jinja2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后,这里看一下html文件的编写:</p><p><strong>home.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-style</span><span class="token punctuation">:</span>italic</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>form.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Please Sign In<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  &#123;% if message %&#125;  <span class="token comment">&lt;!--这里的&#123;% if message %&#125;与下面的endif语句,当前者的条件判断为真时,则会执行两者之间的代码,否则将被略过--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123; message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 这里的 &#123;&#123; message &#125;&#125; ,相当于引用渲染模板是传入的关键字参数--></span>  &#123;% endif %&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/signin<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Please sign in:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里的username同样是引用外部参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; username &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign In<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>signin-ok.html</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Welcome, &#123;&#123; username &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Welcome, &#123;&#123; username &#125;&#125;!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Django"><a href="#使用Django" class="headerlink" title="使用Django"></a>使用Django</h3><p>首先第一步需要安装django,直接使用<code>pip</code>安装即可:<code>pip3 install django</code> </p><p>现在你已经安装了django框架,然后怎么用呢?</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>在终端内输入<code>django-admin startproject mysite</code> ,请注意,此命令会在当前目录下创建一个名为<code>mysite</code>的文件夹,此时此文件夹内的层级是这样的:</p><ul><li>mysite<ul><li>manage.py</li><li>mysite<ul><li>__init__.py</li><li>settings.py</li><li>urls.py</li><li>wsgi.py</li></ul></li></ul></li></ul><p>创建了项目之后,先进入项目文件夹,然后创建web app,这些操作翻译成终端指令就是:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd mysitepython3 manage.py startapp myapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此操作会在当前文件夹下创建一个名为<code>myapp</code>的文件夹.myapp文件夹下的层级是这样的:</p><ul><li>myapp<ul><li>__init__.py</li><li>admin.py</li><li>models.py</li><li>tests.py</li><li>views.py</li></ul></li></ul><p>如果是django1.8.x以上的版本,还会有一个<strong>migrations</strong>文件夹,django 1.9.x还会在1.8的基础上多出来一个<strong>apps.py</strong>文件</p><p>此时终端下输入:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在浏览器访问</p><p><code>localhost:8000</code>,访问成功就表示配置成功了.</p><p>此时在终端内按下CTRL+C即可关闭服务器.</p><h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello,world"></a>Hello,world</h4><p>打开<code>myapp</code>文件夹下的<code>views.py</code>,这个文件当前只有一行import语句,修改源码为:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">b'Hello,world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数<code>request</code>就是浏览器访问页面时附带的请求信息,这里返回一个字符串作为请求结果.</p><p>然后再打开<code>mysite</code>文件夹下的<code>urls.py</code> ,编辑代码为:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>views <span class="token keyword">import</span> index<span class="token comment"># 这里是修改的代码</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    url<span class="token punctuation">(</span><span class="token string">r'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">(</span><span class="token string">r'^$'</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token comment"># 这里是修改的代码</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>urlpatterns</code>以列表的形式定义了服务器当前可被访问的页面地址,修改之后的的文件相较之前只改了两行代码,第一行负责把刚刚编辑的<code>views.py</code>文件内的<code>index</code>方法import进来,第二行代码绑定了主页的访问函数,请注意<code>url</code>方法第一个参数里的正则表达式就是页面访问地址,在这里理解为,当访问主页时,就会来到<code>index</code>函数这里.</p><p>此时在浏览器内刷新刚才的网页,如无意外的话,页面内应该有<code>Hello,world</code>这句话.</p><h4 id="在Django内使用模板"><a href="#在Django内使用模板" class="headerlink" title="在Django内使用模板"></a>在Django内使用模板</h4><p>毫无疑问django也是具备模板技术的,那么如何使用模板呢?</p><p>假如说这里的需求是,可以处理类似:</p><p><code>localhost:8000/name</code>这样域名后附带用户姓名的URL,可以这样写:</p><p>这里先修改一下<code>views.py</code>中的<code>index</code>方法:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'home.html'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"uname"</span><span class="token punctuation">:</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的意思是渲染<code>home.html</code>这个文件,第三个参数是渲染时附带的参数,返回给用户,然后需要创建这里的html文件:</p><p>在<code>myapp</code>文件夹下创建文件夹<code>templates</code>,在此文件夹中创建文件<code>home.html</code>,html文件中:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>欢迎!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Hello,&#123;&#123; uname &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html文件内部的表示引用在渲染模板文件时传入的<code>uname</code>参数.</p><p>然后再修改<code>urls.py</code>,把之前的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">url<span class="token punctuation">(</span><span class="token string">r'^$'</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码换为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">url<span class="token punctuation">(</span><span class="token string">r'^(\w+)'</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'home'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里梳理一下,<code>views.py</code>负责提供页面所需要的视图内容,<code>templates</code>文件夹下的文件则是渲染视图时用的模板文件,需要在<code>render()</code>函数内使用,<code>urls.py</code>负责规定当前app可用于访问的URL,并捕获参数传入view层.</p><p>此时再次运行服务器,即可看到效果.其实如果不停止服务器,当你项目内的文件发生修改时,只要你<code>settings.py</code>中的debug模式确认打开,django会自动刷新的,也就是说不用停止服务器,直接在浏览器类刷新就可以看到效果.</p><h2 id="移动端App"><a href="#移动端App" class="headerlink" title="移动端App"></a>移动端App</h2><p>这里先简单说一下,其实移动端跟web端的请求方式都是一样的,单论返回内容来讲,区别只是如果是要在App内使用的话,普遍都是需要返回给移动端一段JSON文本内容,也就是说与web端相比,我们只需要把返回的HTML修改为JSON内容就OK.</p><h3 id="使用Flask作为移动端服务器"><a href="#使用Flask作为移动端服务器" class="headerlink" title="使用Flask作为移动端服务器"></a>使用Flask作为移动端服务器</h3><p>首先可以依靠<code>jsonify()</code>函数得到标准的JSON格式并返回给客户端.</p><p>这里是一个简单的示例代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>jsonifyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>GET <span class="token operator">=</span> <span class="token string">"GET"</span>POST <span class="token operator">=</span> <span class="token string">"POST"</span><span class="token comment"># 模拟返回内容</span>response_list <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"userList"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"uname"</span><span class="token punctuation">:</span><span class="token string">"username1"</span><span class="token punctuation">,</span>            <span class="token string">"uid"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"uimg"</span><span class="token punctuation">:</span><span class="token string">"image link"</span><span class="token punctuation">,</span>            <span class="token string">"udesc"</span><span class="token punctuation">:</span><span class="token string">"user description content"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"uname"</span><span class="token punctuation">:</span> <span class="token string">"username1"</span><span class="token punctuation">,</span>            <span class="token string">"uid"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"uimg"</span><span class="token punctuation">:</span> <span class="token string">"image link"</span><span class="token punctuation">,</span>            <span class="token string">"udesc"</span><span class="token punctuation">:</span> <span class="token string">"user description content"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/user/list/"</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span>GET<span class="token punctuation">,</span>POST<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">user_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>response_list<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时打开浏览器访问<a href="http://localhost:5000/user/list/">http://localhost:5000/user/list/</a>即可看到与这里的<code>response_list</code>的内容一致的JSON文本.</p><p>—未完待续--</p>]]></content>
      
      
      <categories>
          
          <category> 脚本语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造一个更利于Debug的Swift控制台</title>
      <link href="/2016/08/24/swift-debug-console/"/>
      <url>/2016/08/24/swift-debug-console/</url>
      
        <content type="html"><![CDATA[<p>Xcode8以前可用于在控制台输出不同色彩的log信息,Xcode8以后由于颜色被屏蔽,但是log内容仍然有效,输出内容可包含:log语句的行数,文件名,警报级别,线程名称等信息.仍然是不错的调试利器</p><span id="more"></span><p><img src="/imgs/swift-debug-console/console_1.png" alt="debug-console"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先我们安装所需要的配置:</p><h4 id="添加XCGLogger"><a href="#添加XCGLogger" class="headerlink" title="添加XCGLogger"></a>添加XCGLogger</h4><p>使用cocoapods添加就可以,在你的Podfile添加下面这句: </p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">pod <span class="token string">'XCGLogger'</span><span class="token punctuation">,</span><span class="token string">'~>3.5'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装XcodeColors"><a href="#安装XcodeColors" class="headerlink" title="安装XcodeColors"></a>安装XcodeColors</h4><p>下载工程文件<a href="https://github.com/DeepIT/XcodeColors">XcodeColors</a>,打开工程文件,run一下~~~<br>在Alcatraz中也可以找到,直接安装就好.</p><h4 id="安装KZLinkedConsole"><a href="#安装KZLinkedConsole" class="headerlink" title="安装KZLinkedConsole"></a>安装KZLinkedConsole</h4><p>安装方法同上,链接在<a href="https://github.com/krzysztofzablocki/KZLinkedConsole">这里</a>,Alcatraz中也能搜索到.</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>打印需要借助XCGLogger:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">XCGLogger</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先需要初始化log对象,XCGLogger的初始化看起来比较繁琐,但是十分见名知意:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> log <span class="token operator">=</span> <span class="token builtin">XCGLogger</span><span class="token punctuation">.</span><span class="token function">defaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时只是获得了一个log对象,要想要使用的话还需要一些配置,它的配置方法看起来像是这个样子的:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">log<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token builtin">XCGLogger</span><span class="token punctuation">.</span><span class="token builtin">LogLevel</span><span class="token punctuation">,</span>                  showLogIdentifier<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  showFunctionName<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  showThreadName<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  showLogLevel<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  showFileNames<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  showLineNumbers<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  showDate<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">,</span>                  writeToFile<span class="token punctuation">:</span> <span class="token builtin">AnyObject</span><span class="token operator">?</span><span class="token punctuation">,</span>                  fileLogLevel<span class="token punctuation">:</span> <span class="token builtin">XCGLogger</span><span class="token punctuation">.</span><span class="token builtin">LogLevel</span><span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>showLogIdentifier</code>等后面的一个Bool参数,顾名思义,是决定是否输出一些附加信息的参数.<br>这里的<code>XCGLogger.LogLevel</code>表示打印输出的等级,<strong>枚举值</strong>,如果你设置了一个低等级的日志等级,那么高于此等级的日志打印就不会被输出了,XCGLogger的输出等级从高到低分别是:</p><ul><li><code>.Verbose</code></li><li><code>.Debug</code></li><li><code>.Info</code></li><li><code>.Warning</code></li><li><code>.Error</code></li><li><code>.Severe</code></li><li><code>.None</code></li></ul><p>XCGLogger的默认日志打印模式是没有颜色的,所以需要设置其以带颜色的模式打印:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">log<span class="token punctuation">.</span>xcodeColorsEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时使用这些方法打印一些东西来看一下效果:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Debug信息"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"Warning信息"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error信息"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"一般内容信息"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时的控制台看起来是这个样子的:</p><p><img src="/imgs/swift-debug-console/console_2.png" alt="debug"></p><p>看起来是有点意思了,但是颜色貌似有点不太和谐,所以XCGLogger提供了一个属性用于设定不同等级的log对应颜色的映射,设置一下,就像这样:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">log<span class="token punctuation">.</span>xcodeColors <span class="token operator">=</span> <span class="token punctuation">[</span>           <span class="token punctuation">.</span><span class="token builtin">Verbose</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>lightGrey<span class="token punctuation">,</span>           <span class="token punctuation">.</span><span class="token builtin">Debug</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>darkGrey<span class="token punctuation">,</span>           <span class="token punctuation">.</span><span class="token builtin">Info</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>darkGreen<span class="token punctuation">,</span>           <span class="token punctuation">.</span><span class="token builtin">Warning</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span>           <span class="token punctuation">.</span><span class="token builtin">Error</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span>           <span class="token punctuation">.</span><span class="token builtin">Severe</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whiteOnRed       <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在按照同样的方式打印一下看看:</p><p><img src="/imgs/swift-debug-console/console_3.png" alt="debug"></p><p>以上实际上就是开头那张图片的效果的完整实现方式,但是有一个问题是:如果每次都setup,配置颜色的话,未免太麻烦了.</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>编写一个Logger.swift,内容如下:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">let</span> log<span class="token punctuation">:</span> <span class="token builtin">XCGLogger</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> log <span class="token operator">=</span> <span class="token builtin">XCGLogger</span><span class="token punctuation">.</span><span class="token function">defaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> logPath <span class="token punctuation">:</span> <span class="token constant">NSURL</span> <span class="token operator">=</span> cacheDirectory<span class="token punctuation">.</span><span class="token function">URLByAppendingPathComponent</span><span class="token punctuation">(</span><span class="token string">"XCGLogger.Log"</span><span class="token punctuation">)</span>    #<span class="token keyword">if</span> <span class="token constant">DEBUG</span>        log<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">Debug</span><span class="token punctuation">,</span> showThreadName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> showLogLevel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> showFileNames<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> showLineNumbers<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> writeToFile<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>    #<span class="token keyword">else</span>        log<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">Severe</span><span class="token punctuation">,</span> showThreadName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> showLogLevel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> showFileNames<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> showLineNumbers<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> writeToFile<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>    #endif    log<span class="token punctuation">.</span>xcodeColorsEnabled <span class="token operator">=</span> <span class="token boolean">true</span>    log<span class="token punctuation">.</span>xcodeColors <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">.</span><span class="token builtin">Verbose</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>lightGrey<span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token builtin">Debug</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>darkGrey<span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token builtin">Info</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>darkGreen<span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token builtin">Warning</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token builtin">Error</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token builtin">Severe</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whiteOnRed    <span class="token punctuation">]</span>    <span class="token keyword">return</span> log<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">var</span> documentsDirectory<span class="token punctuation">:</span> <span class="token constant">NSURL</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token builtin">NSFileManager</span><span class="token punctuation">.</span><span class="token function">defaultManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">URLsForDirectory</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">DocumentDirectory</span><span class="token punctuation">,</span> inDomains<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">UserDomainMask</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urls<span class="token punctuation">[</span>urls<span class="token punctuation">.</span>endIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">var</span> cacheDirectory<span class="token punctuation">:</span> <span class="token constant">NSURL</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token builtin">NSFileManager</span><span class="token punctuation">.</span><span class="token function">defaultManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">URLsForDirectory</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">CachesDirectory</span><span class="token punctuation">,</span> inDomains<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">UserDomainMask</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urls<span class="token punctuation">[</span>urls<span class="token punctuation">.</span>endIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用:swift文件之间不需要import,所以使用可以直接log.debug(),log.info()…<br>因为其只是一个全局常量而已.</p><p>–End Of File–</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift Tips</title>
      <link href="/2016/06/07/swift-tips/"/>
      <url>/2016/06/07/swift-tips/</url>
      
        <content type="html"><![CDATA[<p>一些使用Swift时的一些小Tips</p><span id="more"></span><h3 id="使struct支持-操作符"><a href="#使struct支持-操作符" class="headerlink" title="使struct支持 == 操作符"></a>使struct支持 == 操作符</h3><p>如果直接使用struct进行比较的话,一般会得到如下警报:</p><p><img src="/imgs/SwiftTips/tips_1.png" alt="错误内容"></p><p>错误的大致意思就是 ‘==’这个操作符不能被作用于这里的’myStruct’类型的数据上.</p><p>解决方式就是,使myStruct遵循Equatable协议,并且实现==方法,代码如下:</p><p><img src="/imgs/SwiftTips/tips_2.png" alt="解决方式"></p><p>如图,在==方法内部,依次比较struct内的所有元素即可.</p><p>20180811更新：</p><blockquote><p>在Swift 4.2之后，当结构体内所有元素全都遵循Equatable或者Hashable等等协议时，结构体本身会自动遵循对应的协议，不需要再写多余的代码。</p></blockquote><h3 id="enum模式匹配"><a href="#enum模式匹配" class="headerlink" title="enum模式匹配"></a>enum模式匹配</h3><p>Swift中的enum支持关联值,如果要匹配enum并取出关联值,官方给出的方式是依赖于switch语句,类似于下面这个:</p><p><img src="/imgs/SwiftTips/tips_2_1.png" alt="Swift模式匹配"></p><p>但是这种写法非常笨重,每次想获取关联值的时候,总不能每次都写switch语句吧? 其实我们可以这样写:</p><p><img src="/imgs/SwiftTips/tips_2_2.png" alt="case匹配"></p><p>那么同时我们也可以使用where从句来配合使用:</p><p>判断当title为”标题”时,才可通过匹配:</p><p><img src="/imgs/SwiftTips/tips_2_3.png" alt="where从句"></p><p><img src="/imgs/SwiftTips/tips_2_4.png" alt="where从句"></p><p>配合guard语句使用:</p><p><img src="/imgs/SwiftTips/tips_2_5.png" alt="使用guard语句"></p><p>除去上面的 ‘if case let’ ,’if case let where’以及’guard case let’语句以外,还存在一个’for case’:</p><p><img src="/imgs/SwiftTips/tips_2_6.png" alt="使用for case"></p><p>同样也可以配合where从句使用:</p><p><img src="/imgs/SwiftTips/tips_2_7.png" alt="使用for case where"></p><h3 id="使用Markdown来为Xcode编写代码文档"><a href="#使用Markdown来为Xcode编写代码文档" class="headerlink" title="使用Markdown来为Xcode编写代码文档"></a>使用Markdown来为Xcode编写代码文档</h3><p>随着Xcode的更新,我们现在可以用Markdown来写富文本格式的代码文档了.<br>Markdown的基础语法,可以参见<a href="https://daringfireball.net/projects/markdown/syntax">这里</a>或者<a href="https://confluence.atlassian.com/bitbucketserver/markdown-syntax-guide-776639995.html">这里</a>.</p><p>在使用Markdown编写文档之前,有一些规则是需要遵守的,文档需要写在注释(/**      */内部或者///后面)内部.</p><p>比如这样:</p><p><img src="/imgs/SwiftTips/tips_3_1.png" alt="文档1"></p><p>文字两边加两个星号是用来强调文字语气的,可以看到前面四个字已经加粗了字体.<br>无序列表样式,可以这样:</p><p><img src="/imgs/SwiftTips/tips_3_2.png" alt="无序列表文档样式"></p><p>这里的文档不仅仅可用于按住option键弹出的快速预览,也可用于位于Xcode右边栏的快速帮助内,就像这样:</p><p><img src="/imgs/SwiftTips/tips_3_3.png" alt="无序列表文档样式"></p><p>不光这样,还可以添加一个超链接进去:</p><p><img src="/imgs/SwiftTips/tips_3_4.png" alt="文档中添加超链接"></p><p>并不只有这样,Xcode在解析Markdown的时候还内置了一些关键字,这些关键字可更好的配合文档注释展示更加完美的效果,这些关键字包括parameter以及returns,分别表示参数部分以及返回值部分,其使用方式以及实现效果如下:</p><p><img src="/imgs/SwiftTips/tips_3_5.png" alt="使用关键字"></p><p>坏消息是关键字没有缩写,好消息是如果你安装了VVDocument插件的话,这些东西会自动生成0.0</p><h3 id="enum关联值"><a href="#enum关联值" class="headerlink" title="enum关联值"></a>enum关联值</h3><p>要想给一个enum绑定其他值,有两种方式可以实现,第一种是以rawValue的形式,像是这样:</p><p><img src="/imgs/SwiftTips/tips_4_1.png" alt="rawValue关联值"></p><p>第二种方式,直接将对应的关联值在case后面使用括号关联,可关联多个值,但是相对的,如果使用这种方式的话,其枚举值就不能使用rawValue了,写法像这样:</p><p><img src="/imgs/SwiftTips/tips_4_2.png" alt="关联值2"></p><p>需要注意的是,如果你是用的是OC与Swift混编的话,最好不要使用第二种关联值的方式,因为这是OC并不支持的类型,导致你在OC里面根本找不到你在Swift文件中写的这个枚举类型.</p><h3 id="defer关键字"><a href="#defer关键字" class="headerlink" title="defer关键字"></a>defer关键字</h3><p><code>defer</code>的字面翻译的意思是<em>推迟,延期</em>的意思,其实现的效果也是这个意思,其语法结构是:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">defer</span> <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span>#deferred statements#<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大括号内部就是需要延迟执行的代码块,其实现原理借助于栈操作,在一个函数(或语句块,代码块)内部,最前面的<code>defer</code>语句将被最先加入栈中,最后面的<code>defer</code>语句将被最先从栈中弹出,并执行其中的代码,注意执行<code>defer</code>语句将会<strong>在函数返回之后</strong>逐个执行.</p><p>当设置和清理工作成对出现的时候,你就可以使用<code>defer</code>语句,比如这样:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//连接数据库</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">defer</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//提交数据库事务</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">//关闭(断开连接)数据库</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//执行数据库语句</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中,提交数据库事务以及与数据库断开连接的操作将在<strong>函数返回之后</strong>执行.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UIBezierPath基础</title>
      <link href="/2016/05/25/demos/"/>
      <url>/2016/05/25/demos/</url>
      
        <content type="html"><![CDATA[<p>UIBezierPath的主要用途其实就是提供一个绘图路径,其结合CAShapeLayer可以实现一些又优美的效果.</p><span id="more"></span><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>最终的效果:<img src="/imgs/demos/demos_1.gif" alt="Demo.gif"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>下面是这个效果的实现部分</p><h4 id="画一个圆形"><a href="#画一个圆形" class="headerlink" title="画一个圆形"></a>画一个圆形</h4><p>先看一个简单的方式:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">UIBezierPath</span><span class="token punctuation">(</span>ovalInRect<span class="token punctuation">:</span> <span class="token function">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个方式不仅可以画圆,画一个椭圆也是可以的,会根据给定的大小来决定是否为椭圆<br><code>UIBezierPath</code>仅仅提供了一个视图的路径,如果想要显示的话就要配合<code>CAShapeLayer</code>来使用:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> shapeLayer <span class="token operator">=</span> <span class="token function">CAShapeLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      shapeLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token builtin">CGPath</span><span class="token comment">//设置shapeLayer的路径</span>      shapeLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token function">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>      shapeLayer<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">7.0</span><span class="token comment">//线条宽度</span>      shapeLayer<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token constant">kCALineCapRound</span><span class="token comment">//线条顶端的样式</span>      shapeLayer<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span><span class="token function">blackColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">CGColor</span><span class="token comment">//线条连接线的颜色</span>      <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span>shapeLayer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候会出现一个圆形:<br><img src="/imgs/demos/demos_2.png" alt="圆形_1.png"></p><p>现在设置一下填充区域的颜色:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">shapeLayer<span class="token punctuation">.</span>fillColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span><span class="token function">clearColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">CGColor</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个真正的圆环出现了:</p><p><img src="/imgs/demos/demos_3.png" alt="圆形_2.png"></p><p>上面是使用的(较为)简单的方式创建UIBezierPath,下面介绍一个较为复杂的方式来实现这个效果:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">UIBezierPath</span><span class="token punctuation">(</span>arcCenter<span class="token punctuation">:</span> <span class="token function">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//圆心坐标</span>                        radius<span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span><span class="token comment">//半径,也可以理解为圆环的内侧距离圆心的距离</span>                        startAngle<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span><span class="token comment">//起始角度</span>                        endAngle<span class="token punctuation">:</span> <span class="token function">CGFloat</span><span class="token punctuation">(</span><span class="token constant">M_PI</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span><span class="token punctuation">,</span><span class="token comment">//结束角度</span>                        clockwise<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//是否顺时针绘制                             </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于这里的角度的部分参照这张图:</p><p><img src="/imgs/demos/demos_4.png" alt="参照.png"></p><h4 id="动画部分"><a href="#动画部分" class="headerlink" title="动画部分"></a>动画部分</h4><p>接下来需要涉及两个属性:<code>CAShapeLayer</code>的<code>strokeStart</code>以及<code>strokeEnd</code>属性,这两个属性都可以理解为视图绘制’进度’,不同的是前者代表开始绘制的进度,后者代表结束的,取值范围0-1,如果假如说我把<code>strokeEnd</code>设置为0.8,这里是效果图:</p><p><img src="/imgs/demos/demos_5.png" alt="demos_5.png"></p><p>设置为0.5:</p><p><img src="/imgs/demos/demos_6.png" alt="demos_5.png"></p><p><code>strokeStart</code>的使用也是同样的道理,只不过如果两者如果配合使用的话,需要注意start不能大于end.</p><p>在苹果的官方文档中,对这两个属性是这么描述的:</p><pre><code>/* These values define the subregion of the path used to draw the * stroked outline. The values must be in the range [0,1] with zero* representing the start of the path and one the end. Values in * between zero and one are interpolated linearly along the path * length. strokeStart defaults to zero and strokeEnd to one. Both are* animatable. */</code></pre><p>可以看到,最后一句说明,这两个属性都可用于动画</p><p>关于弹性动画的部分,主要利用POP的三个自带的动画属性<code>kPOPShapeLayerStrokeStart</code>,<code>kPOPShapeLayerStrokeEnd</code>,<br><code>kPOPShapeLayerStrokeColor</code>,这三个动画,配合计时器的使用,就可以达到本文中图一的效果,以下是主要代码:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">lazy</span> <span class="token keyword">var</span> shapeLayer<span class="token punctuation">:</span><span class="token builtin">CAShapeLayer</span> <span class="token operator">=</span> <span class="token function">CAShapeLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> timer<span class="token punctuation">:</span><span class="token builtin">NSTimer</span><span class="token operator">?</span>         <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">setupView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">setupTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">setupTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token builtin">NSTimer</span><span class="token punctuation">.</span><span class="token function">scheduledTimerWithTimeInterval</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> #<span class="token function">selector</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>onTimerAction<span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">setupView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">UIBezierPath</span><span class="token punctuation">(</span>arcCenter<span class="token punctuation">:</span> <span class="token function">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               radius<span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span>                               startAngle<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>                               endAngle<span class="token punctuation">:</span> <span class="token function">CGFloat</span><span class="token punctuation">(</span><span class="token constant">M_PI</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span><span class="token punctuation">,</span>                               clockwise<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token builtin">CGPath</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token function">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">7.0</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>lineCap <span class="token operator">=</span> <span class="token constant">kCALineCapRound</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>strokeEnd <span class="token operator">=</span> <span class="token number">0.5</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>fillColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span><span class="token function">clearColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">CGColor</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span><span class="token function">blackColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">CGColor</span>              <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">addSublayer</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>      <span class="token atrule">@objc</span> <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">onTimerAction</span><span class="token punctuation">(</span>sender<span class="token punctuation">:</span><span class="token builtin">NSTimer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">let</span> strokeValue1 <span class="token operator">=</span> <span class="token function">randomFloatTo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">let</span> strokeValue2 <span class="token operator">=</span> <span class="token function">randomFloatTo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">let</span> strokeStartAnimation <span class="token operator">=</span> <span class="token function">POPSpringAnimation</span><span class="token punctuation">(</span>propertyNamed<span class="token punctuation">:</span> <span class="token constant">kPOPShapeLayerStrokeStart</span><span class="token punctuation">)</span>       strokeStartAnimation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> strokeValue1 <span class="token operator">></span> strokeValue2 <span class="token operator">?</span> strokeValue2 <span class="token punctuation">:</span> strokeValue1       strokeStartAnimation<span class="token punctuation">.</span>springBounciness <span class="token operator">=</span> <span class="token number">18.0</span>       <span class="token keyword">let</span> strokeEndAnimation <span class="token operator">=</span> <span class="token function">POPSpringAnimation</span><span class="token punctuation">(</span>propertyNamed<span class="token punctuation">:</span> <span class="token constant">kPOPShapeLayerStrokeEnd</span><span class="token punctuation">)</span>        strokeEndAnimation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> strokeValue1 <span class="token operator">></span> strokeValue2 <span class="token operator">?</span> strokeValue1 <span class="token punctuation">:</span> strokeValue2       strokeEndAnimation<span class="token punctuation">.</span>springBounciness <span class="token operator">=</span> <span class="token number">18.0</span>       <span class="token keyword">let</span> strokeColorAnimation <span class="token operator">=</span> <span class="token function">POPBasicAnimation</span><span class="token punctuation">(</span>propertyNamed<span class="token punctuation">:</span> <span class="token constant">kPOPShapeLayerStrokeColor</span><span class="token punctuation">)</span>       strokeColorAnimation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">CGColor</span>              <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span><span class="token function">pop_addAnimation</span><span class="token punctuation">(</span>strokeStartAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"strokeStart"</span><span class="token punctuation">)</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span><span class="token function">pop_addAnimation</span><span class="token punctuation">(</span>strokeEndAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"strokeEnd"</span><span class="token punctuation">)</span>       <span class="token keyword">self</span><span class="token punctuation">.</span>shapeLayer<span class="token punctuation">.</span><span class="token function">pop_addAnimation</span><span class="token punctuation">(</span>strokeColorAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"strokeColor"</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">randomFloatTo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">CGFloat</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token function">CGFloat</span><span class="token punctuation">(</span><span class="token function">arc4random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1001</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span>   <span class="token punctuation">&#125;</span>      <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UIColor</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token function">UIColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token function">randomFloatTo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token function">randomFloatTo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token function">randomFloatTo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用此效果结合上一篇博客中的倒计时效果,也可以实现一个还算不错的进度条了.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Facebook POP </tag>
            
            <tag> CAShapeLayer </tag>
            
            <tag> UIBezierPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift自动布局篇之Snapkit简单使用</title>
      <link href="/2016/05/22/snapkit-usage/"/>
      <url>/2016/05/22/snapkit-usage/</url>
      
        <content type="html"><![CDATA[<p>SnapKit可以认为是Masonry的Swift版本,本文介绍以及实例如何使用SnapKit进行AutoLayout编程</p><span id="more"></span><h4 id="Swift导入"><a href="#Swift导入" class="headerlink" title="Swift导入:"></a>Swift导入:</h4><p>1),通过cocoapdos安装,如果不会用cocoapods的话可以去看看code4app的<a href="http://code4app.com/article/cocoapods-install-usage">这篇博客</a><br>Podfile配置如下:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">platform <span class="token symbol">:ios</span><span class="token punctuation">,</span> <span class="token string">'8.0'</span>use_frameworks<span class="token operator">!</span>target <span class="token string">'你的工程名称'</span> <span class="token keyword">do</span>pod <span class="token string">'SnapKit'</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2),直接将SnapKit拖进工程目录,到SnapKit的<a href="https://github.com/SnapKit/SnapKit">Github</a>点击Download Zip按钮下载SnapKit工程文件,解压后把其中的SnapKit.xcodeproj文件直接拖进工程即可.切记确保SnapKit工程下的所有需要的支持文件全都被拖过去了.(SnapKit工程本身不支持iOS7或之前的系统,如果需要支持iOS7的话请考虑此方法导入.)</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>举个小栗子,使一个相对当前View居中并且大小为200*100</p><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">        let redView &#x3D; UIView()        redView.backgroundColor &#x3D; UIColor.redColor()        self.view.addSubview(redView)        redView.snp_makeConstraints &#123; (make) in            make.edges.equalTo(self.view).inset(UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20))&#x2F;&#x2F;将redView的边界约束为self.view并且每条边都是20的偏移        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图:<br><img src="/imgs/snapkit-usage/snapkit_1.png" alt="效果图1"><br>当然,完全支持横屏,我这里就不放图片了.<br>与上面使用的edges相似的其他属性:<br>边界: left,right,top,bottom,edges,leading,trailing<br>(left与leading的区别,left始终代表view的左边,而leading代表view的布局起点,如果是从左到右布局则代表view的左边,其他的以此类推)<br>尺寸,大小:width,height,size<br>(如果需要在.equalTo或其他函数中使用这些属性,则要使用其对应的snp_top,snp_bottom…..版本)<br>优先级:priority,一般用在约束语句链的最后面,例如</p><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">make.bottom.equalTo(self.view).priorityLow()&#x2F;&#x2F;低优先级&#x2F;&#x2F;也可以使用priority()方法传入具体优先级的级别,(0-1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与equalTo相似的其他约束函数:<br>小于等于:lessThanOrEqualTo<br>大于等于:greaterThanOrEqualTo<br>我最经常使用lessThanOrEqualTo或者greaterThanOrEqualTo是针对于UILabel的约束,如果有这么个需求:文字长度如果短于某个值,则让label适应文字宽度,如果长于这个值的话,则让label的宽度固定,高度适应其文本,那么这里的”小于等于”就派上用场了,看代码:</p><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">        self.label.text &#x3D; &quot;这是一个很长的字符串&quot;self.label.numberOfLines &#x3D; 0        self.view.addSubview(self.label)        label.snp_makeConstraints &#123; (make) in            make.center.equalTo(self.view)            make.width.lessThanOrEqualTo(self.view).offset(-50)&#x2F;&#x2F;只需要约束宽度即可,这里约束的最大宽度为屏幕宽度-50,事实上如果没有其他需求的话针对于一个label来说只需要确定一个位置,不需要大小就可以认定这是一个完整的约束.(此技能目前我只知道针对于UILabel,UIImageView,UIButton有效)        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在控制器的touchesBegan里面这么写</p><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">            self.label.text! +&#x3D; self.label.text!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在初始状态的label:<br><img src="/imgs/snapkit-usage/snapkit_2.png"><br>多点几下就是这样<br><img src="/imgs/snapkit-usage/snapkit_3.png"></p><h4 id="约束更新-amp-重做约束"><a href="#约束更新-amp-重做约束" class="headerlink" title="约束更新&amp;重做约束:"></a>约束更新&amp;重做约束:</h4><ul><li>SnapKit内置snp_updateConstraints方法用来更新约束.其内部写法与加约束的方式一致,需要注意的是,所谓的更新也就意味着砸原有的基础上进行修改,所以说更新约束必须要和加约束的时候相对应,比如说你在snp_makeConstraints中给一个View加了一个针对于center的约束,在更新约束时就只能修改针对于这个center的约束,否则的话你只能得到一个警报</li><li>重做约束,snp_remakeConstraints,这个理解起来就很简单了,实现这个方法之后会移除view之前所有的约束然后重新添加约束.<br>(更新约束之后如果需要立即体现出来的话,可以先对更新约束的父View调用setNeedsLayout()使父view进入需要更新布局的状态,其次再layoutIfNeeded()更新布局,如果需要动画的话,把layoutIfNeeded()放到动画过程里面即可)</li></ul><h5 id="SnapKit中没有类似于Masonry中的给一组View进行约束的方法"><a href="#SnapKit中没有类似于Masonry中的给一组View进行约束的方法" class="headerlink" title="SnapKit中没有类似于Masonry中的给一组View进行约束的方法."></a>SnapKit中没有类似于Masonry中的给一组View进行约束的方法.</h5><h4 id="一些小Tips"><a href="#一些小Tips" class="headerlink" title="一些小Tips"></a>一些小Tips</h4><p>对于在UIScrollView上使用自动布局,scrollView的子视图务必四周都对scrollView进行约束,原因很简单:scrollView的滑动是依赖其属性contentSize,如果这个size小于scrollView视图本身的话就不能滑动,添加子视图的时候对四周做约束就相当于把contentSize”撑”开了,帮助其确定子控件也就是其contentSize大小.</p><p>一个比较常用的做法是,给ScrollView添加一个子View作为其contentView,给contentView的四周针对ScrollView添加约束,然后其他控件添加在contentView之内.这个方式不管是代码布局还是使用故事板都同样适用.</p><p>对于一个Autolayout Based View，如何计算其本身的实际内容大小？</p><blockquote><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// UIView用于计算其内容大小的api，需要注意的是如果希望得到正确的结果，需要确保所有的subView之间的约束，可用于确定当前View的大小。</span><span class="token keyword">func</span> <span class="token function">systemLayoutSizeFitting</span><span class="token punctuation">(</span><span class="token number">_</span> targetSize<span class="token punctuation">:</span> <span class="token builtin">CGSize</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">CGSize</span><span class="token comment">// 参数分别传入`UILayoutFittingExpandedSize`或者`UILayoutFittingCompressedSize`可用于获得其最大的可能大小或者最小的可能大小（一般来说就是内容实际占用的大小）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>AutoLayout针对于UILabel,UIImageView,UIButton来说,只需要确定其位置(x轴与y轴),便可以算是一个完整的约束,不同的是UILabel会根据其文字内容来确定控件大小,UIButton在没有标题的情况下同样如此,UIImageView以及设置了image的UIButton,一般会根据图片的大小来确定控件大小,所以对于带image的button以及UIImageView来说,最好还是要加上针对于四周的约束.<br>补充一点,有时候我们的需求是,不管是横屏还是竖屏,View刚好在导航栏下面,我们都知道导航栏加上状态栏是64的高度,而横屏状态下是没有状态栏的,针对这一点其实Masonry还有SnapKit都有针对这种情况的解决方案.在SnapKit的UIViewController+SnapKit.swift文件中,给UIViewController加了这样几个属性<br><code>snp_topLayoutGuideTop</code>//顾名思义,这里的topLayoutGuide一般指的是导航栏<br><code>snp_topLayoutGuideBottom</code><br><code>snp_bottomLayoutGuideTop</code>//这里的bottomLayoutGuide一般指的是Tabbar<br><code>snp_bottomLayoutGuideBottom</code><br>那么guideTop,guideBottom就是针对导航栏或者tabbar的顶部与底部</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS动画篇之Facebook POP使用</title>
      <link href="/2016/05/22/facebook-pop-usage/"/>
      <url>/2016/05/22/facebook-pop-usage/</url>
      
        <content type="html"><![CDATA[<p>POP是Facebook开源的一个very powerful的动画库,本文简单介绍一下POP的简单使用</p><span id="more"></span><h3 id="安装pop"><a href="#安装pop" class="headerlink" title="安装pop"></a>安装pop</h3><p>pop支持cocoapods安装:</p><pre> pod 'pop' </pre><p>如果你是用的是Swift,记得在前面加上这么一行:</p><pre> use_frameworks! </pre><p><a href="https://github.com/facebook/pop">这里</a>是pop的Github页面.</p><h3 id="导入pop"><a href="#导入pop" class="headerlink" title="导入pop"></a>导入pop</h3><p>OC:</p><pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">#import&lt;POP&#x2F;POP.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Swift:<br><code>import pop</code></p><p>简单实现一个弹性动画:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">        <span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">AnimationView</span><span class="token punctuation">.</span><span class="token function">pop_animationForKey</span><span class="token punctuation">(</span><span class="token string">"popAnimation"</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">POPSpringAnimation</span>        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation <span class="token operator">==</span> <span class="token constant">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation <span class="token operator">=</span> <span class="token function">POPSpringAnimation</span><span class="token punctuation">(</span>propertyNamed<span class="token punctuation">:</span> <span class="token constant">kPOPViewCenter</span><span class="token punctuation">)</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation<span class="token operator">?</span><span class="token punctuation">.</span>springSpeed <span class="token operator">=</span> <span class="token number">20.0</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation<span class="token operator">?</span><span class="token punctuation">.</span>springBounciness <span class="token operator">=</span> <span class="token number">25.0</span>            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">AnimationView</span><span class="token punctuation">.</span><span class="token function">pop_addAnimation</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"popAnimation"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token comment">//self.springAnimation?.toValue = NSValue(CGPoint:self.AnimationView.center)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>springAnimation<span class="token operator">?</span><span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token function">NSValue</span><span class="token punctuation">(</span><span class="token builtin">CGPoint</span><span class="token punctuation">:</span> point<span class="token operator">!</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pop_animationForKey</code>:获取对象已存在相同key的POPAnimation对象,如果没有则返回nil</p><p><code>propertyNamed</code>:是POPSpringAnimation继承自POPPropertyAnimation的方法,一般用于创建一个POP内置的动画property</p><p><code>springSpeed</code>:弹性动画(POPSpringAnimation)的属性,用于控制动画速度</p><p><code>springBounciness</code>,也是弹性动画的属性,用于控制动画的弹性幅度<br>这里是效果图:</p><p><code>fromValue</code>:动画的起始值,如果不设置则默认以当前值开始</p><p><code>toValue</code>:动画的目标值(结束值)</p><p>***注意点:***动画的类型(property)需要与<code>fromValue</code>与<code>toValue</code>所对应,这里的property<code>kPOPViewCenter</code>顾名思义是把view的center作为要动画的值,所以<code>fromValue</code>与<code>toValue</code>需要的值应该是CGPoint(其接受AnyObject类型的值,所以使用NSValue来传递)的值.</p><p><img src="/imgs/facebook-pop/pop_1.gif" alt="SpringAnimation.gif"></p><p>衰减动画:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">        <span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">AnimationView</span><span class="token punctuation">.</span><span class="token function">pop_animationForKey</span><span class="token punctuation">(</span><span class="token string">"popAnimation"</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">POPDecayAnimation</span>        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation <span class="token operator">==</span> <span class="token constant">nil</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation <span class="token operator">=</span> <span class="token function">POPDecayAnimation</span><span class="token punctuation">(</span>propertyNamed<span class="token punctuation">:</span> <span class="token constant">kPOPLayerPositionY</span><span class="token punctuation">)</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation<span class="token operator">?</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token function">NSNumber</span><span class="token punctuation">(</span>double<span class="token punctuation">:</span><span class="token number">300.0</span><span class="token punctuation">)</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation<span class="token operator">?</span><span class="token punctuation">.</span>fromValue <span class="token operator">=</span> <span class="token function">NSNumber</span><span class="token punctuation">(</span>double<span class="token punctuation">:</span><span class="token number">100.0</span><span class="token punctuation">)</span>            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">AnimationView</span><span class="token punctuation">.</span><span class="token function">pop_addAnimation</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"popAnimation"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>decayAnimation<span class="token operator">?</span><span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token function">NSValue</span><span class="token punctuation">(</span><span class="token builtin">CGPoint</span><span class="token punctuation">:</span> point<span class="token operator">!</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>衰减动画(POPDecayAnimation)有一点特殊,他没有toValue只有fromValue,然后根据给定的速率(velocity)进行逐渐衰减,也就是说,不能直接控制动画的结束值.当然fromValue也是可以省略的,默认以当前值为fromValue<br>效果图:</p><p><img src="/imgs/facebook-pop/pop_2.gif"></p><p>POP所有的内置属性都定义在POPAnimatableProperty.h文件中,内置的其他property:</p><pre class="line-numbers language-Objective-C" data-language="Objective-C"><code class="language-Objective-C">extern NSString * const kPOPLayerBackgroundColor;extern NSString * const kPOPLayerBounds;extern NSString * const kPOPLayerCornerRadius;extern NSString * const kPOPLayerBorderWidth;extern NSString * const kPOPLayerBorderColor;extern NSString * const kPOPLayerOpacity;extern NSString * const kPOPLayerPosition;extern NSString * const kPOPLayerPositionX;extern NSString * const kPOPLayerPositionY;extern NSString * const kPOPLayerRotation;extern NSString * const kPOPLayerRotationX;extern NSString * const kPOPLayerRotationY;extern NSString * const kPOPLayerScaleX;extern NSString * const kPOPLayerScaleXY;extern NSString * const kPOPLayerScaleY;extern NSString * const kPOPLayerSize;extern NSString * const kPOPLayerSubscaleXY;extern NSString * const kPOPLayerSubtranslationX;extern NSString * const kPOPLayerSubtranslationXY;extern NSString * const kPOPLayerSubtranslationY;extern NSString * const kPOPLayerSubtranslationZ;extern NSString * const kPOPLayerTranslationX;extern NSString * const kPOPLayerTranslationXY;extern NSString * const kPOPLayerTranslationY;extern NSString * const kPOPLayerTranslationZ;extern NSString * const kPOPLayerZPosition;extern NSString * const kPOPLayerShadowColor;extern NSString * const kPOPLayerShadowOffset;extern NSString * const kPOPLayerShadowOpacity;extern NSString * const kPOPLayerShadowRadius;&#x2F;** Common CAShapeLayer property names. *&#x2F;extern NSString * const kPOPShapeLayerStrokeStart;extern NSString * const kPOPShapeLayerStrokeEnd;extern NSString * const kPOPShapeLayerStrokeColor;extern NSString * const kPOPShapeLayerFillColor;extern NSString * const kPOPShapeLayerLineWidth;extern NSString * const kPOPShapeLayerLineDashPhase;&#x2F;** Common NSLayoutConstraint property names. *&#x2F;extern NSString * const kPOPLayoutConstraintConstant;#if TARGET_OS_IPHONE&#x2F;** Common UIView property names. *&#x2F;extern NSString * const kPOPViewAlpha;extern NSString * const kPOPViewBackgroundColor;extern NSString * const kPOPViewBounds;extern NSString * const kPOPViewCenter;extern NSString * const kPOPViewFrame;extern NSString * const kPOPViewScaleX;extern NSString * const kPOPViewScaleXY;extern NSString * const kPOPViewScaleY;extern NSString * const kPOPViewSize;extern NSString * const kPOPViewTintColor;&#x2F;** Common UIScrollView property names. *&#x2F;extern NSString * const kPOPScrollViewContentOffset;extern NSString * const kPOPScrollViewContentSize;extern NSString * const kPOPScrollViewZoomScale;extern NSString * const kPOPScrollViewContentInset;extern NSString * const kPOPScrollViewScrollIndicatorInsets;&#x2F;** Common UITableView property names. *&#x2F;extern NSString * const kPOPTableViewContentOffset;extern NSString * const kPOPTableViewContentSize;&#x2F;** Common UICollectionView property names. *&#x2F;extern NSString * const kPOPCollectionViewContentOffset;extern NSString * const kPOPCollectionViewContentSize;&#x2F;** Common UINavigationBar property names. *&#x2F;extern NSString * const kPOPNavigationBarBarTintColor;&#x2F;** Common UIToolbar property names. *&#x2F;extern NSString * const kPOPToolbarBarTintColor;&#x2F;** Common UITabBar property names. *&#x2F;extern NSString * const kPOPTabBarBarTintColor;&#x2F;** Common UILabel property names. *&#x2F;extern NSString * const kPOPLabelTextColor;#else&#x2F;** Common NSView property names. *&#x2F;extern NSString * const kPOPViewFrame;extern NSString * const kPOPViewBounds;extern NSString * const kPOPViewAlphaValue;extern NSString * const kPOPViewFrameRotation;extern NSString * const kPOPViewFrameCenterRotation;extern NSString * const kPOPViewBoundsRotation;&#x2F;** Common NSWindow property names. *&#x2F;extern NSString * const kPOPWindowFrame;extern NSString * const kPOPWindowAlphaValue;extern NSString * const kPOPWindowBackgroundColor;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有内置属性都可以配合弹性动画/衰减动画/基础动画来使用.</p><hr><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>pop提供了<code>POPAnimatableProperty</code>类,可用于自定义动画的属性,<br>其有三个属性,<code>readBlock</code>,<code>writeBlock</code>,常用的属性是前两个:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> property <span class="token operator">=</span> <span class="token builtin">POPAnimatableProperty</span><span class="token punctuation">.</span><span class="token function">propertyWithName</span><span class="token punctuation">(</span><span class="token string">"property_name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token keyword">in</span>            prop<span class="token punctuation">.</span>writeBlock <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span>                <span class="token comment">//在这里获取目标值并设置动画属性,也可以理解为动画的实现部分</span>            <span class="token punctuation">&#125;</span>            prop<span class="token punctuation">.</span>readBlock <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span>                <span class="token comment">//在这里设置动画属性所需要的值,如果animation设置了fromValue则此属性可选设置</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实践-百分比倒计时动画实现"><a href="#实践-百分比倒计时动画实现" class="headerlink" title="实践:百分比倒计时动画实现"></a>实践:百分比倒计时动画实现</h4><p>我们现在View上面添加一个button,绑定点击事件,以下是button点击的方法实现:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> basicAnimation <span class="token operator">=</span> <span class="token builtin">POPBasicAnimation</span><span class="token punctuation">.</span><span class="token function">linearAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>basicAnimation<span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token builtin">POPAnimatableProperty</span><span class="token punctuation">.</span><span class="token function">propertyWithName</span><span class="token punctuation">(</span><span class="token string">"linearCountdownAnimation"</span><span class="token punctuation">,</span> initializer<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>property<span class="token punctuation">)</span> <span class="token keyword">in</span>    property<span class="token punctuation">.</span>writeBlock <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span>values<span class="token punctuation">)</span> <span class="token keyword">in</span><span class="token comment">//在这里设置动画内容</span>        sender<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">,</span> forState<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">Normal</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">POPAnimatableProperty</span>basicAnimation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">2.0</span>basicAnimation<span class="token punctuation">.</span>fromValue <span class="token operator">=</span> hasAnimated <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">0</span>basicAnimation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> hasAnimated <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">100</span>sender<span class="token punctuation">.</span><span class="token function">pop_addAnimation</span><span class="token punctuation">(</span>basicAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string">"countdown"</span><span class="token punctuation">)</span>hasAnimated <span class="token operator">=</span> <span class="token operator">!</span>hasAnimated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不放效果图是可耻的行为:<br><img src="/imgs/facebook-pop/pop_3.gif" alt="animation.gif"></p><p>时间的倒计时效果跟这个实现原理一致,只需要把writeBlock内部给button的title的值转换为时间就好.<br>pop号称是可以对任何对象进行动画,并不局限于UI效果的体现,<em><strong>据说</strong></em>音频播放的渐入渐出效果也可以使用pop来实现,博主暂时还不得而知,如果各位看官了解如何实现的话,欢迎分享!</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Facebook POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift网络请求基础篇-Alamofire</title>
      <link href="/2016/05/22/alamofire-usage/"/>
      <url>/2016/05/22/alamofire-usage/</url>
      
        <content type="html"><![CDATA[<p>Alamofire是AFNetworking的作者编写的在Swift中使用的网络类库,使用起来逻辑清晰明了,也很容易上手.这里简单介绍一些常用的API</p><span id="more"></span><p>当然AFNetworking在Swift中依然是可以使用的,不过我不推荐那么做.</p><h3 id="安装Alamofire"><a href="#安装Alamofire" class="headerlink" title="安装Alamofire"></a>安装Alamofire</h3><p>可以通过Cocoapods的方式进行安装,podfile配置如下:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">platform <span class="token symbol">:ios</span><span class="token punctuation">,</span> <span class="token string">'8.0'</span>use_frameworks<span class="token operator">!</span>target <span class="token string">'你的工程名称'</span> <span class="token keyword">do</span>pod <span class="token string">'Alamofire'</span><span class="token punctuation">,</span> <span class="token string">'~> 3.3.0'</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后到终端执行pod install就可以了,使用之前先import一下</p><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">import Alamofire<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本使用-请求数据"><a href="#基本使用-请求数据" class="headerlink" title="基本使用,请求数据"></a>基本使用,请求数据</h3><h5 id="普通数据请求"><a href="#普通数据请求" class="headerlink" title="普通数据请求"></a>普通数据请求</h5><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">&#x2F;&#x2F;我把请求放在了button的点击事件里面    @IBAction func onBtnClick(sender: UIButton) &#123;        &#x2F;&#x2F;这里我使用一个查询手机号码归属地的接口为例,        Alamofire.request(.GET,, requestURL,parameters: [&quot;phone&quot;:phoneNumber],encoding: .URL,headers: [&quot;apix-key&quot;:apiKey]).responseJSON &#123; (response) in            &#x2F;&#x2F;是否请求成功&#x2F;&#x2F;            if response.result.isSuccess&#123;&#125;            if let jsonValue &#x3D; response.result.value &#123;                print(jsonValue)            &#125;        &#125;    &#125;      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>        </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token builtin">Method</span><span class="token punctuation">,</span> <span class="token builtin">URLString</span><span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment">//这是一个完整的Alamofire.Request的初始化方法,其中:</span><span class="token comment">//Method,请求方式,如:.GET .POST .DELETE等</span><span class="token comment">//URLString,请求接口</span><span class="token comment">//parameters,请求参数,字典类型,如果是GET方法请求数据,传入的参数将会被转换为key1=value1&amp;key2=value2的形式</span><span class="token comment">//encoding,编码方式,Alamofire提供一个枚举来表示请求所用编码,如.URL,.JSON,那么GET方式请求数据一般使用.URL编码方式</span><span class="token comment">//headers,请求头,对应于在NSURLRequest中的属性allHTTPHeaderFields</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是一个普通的GET请求,传入的参数Alamofire自动以key=value&amp;kay2=value2的形式拼接,如果请求是POST或者需要把请求参数已JSON的形=形式传输的话,encoding参数传入.JSON即可<br>responseJSON闭包中我们得到的参数是一个结构体,里面分别包含了此次请求的request对象,返回数据,请求结果等.</p><h4 id="响应结果控制"><a href="#响应结果控制" class="headerlink" title="响应结果控制"></a>响应结果控制</h4><p>Alamofire.request()返回的是一个Request对象,Request对象的参数都是本次请求中附带的参数,responseJSON是对返回结果的控制,针对返回结果为JSON数据的情况,Alamofire中还提供了处理其他返回结果地方法:</p><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift">response()responseData()&#x2F;&#x2F;二进制数据responseString(encoding: NSStringEncoding)&#x2F;&#x2F;字符串结果responseJSON(options:NSJSONReadingOptions)&#x2F;&#x2F;JSON数据responsePropertyList(options: NSPropertyListReadOptions)&#x2F;&#x2F;属性列表&#x2F;&#x2F;&#x2F;响应方式应该试服务器返回结果而定,如果服务器给你的是JSON数据那么就用responseJSON,如果是其他数据那么也使用对应的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用validate-验证是否请求成功"><a href="#使用validate-验证是否请求成功" class="headerlink" title="使用validate()验证是否请求成功"></a>使用validate()验证是否请求成功</h4><pre class="line-numbers language-Swift" data-language="Swift"><code class="language-Swift"> Alamofire.request(.GET, requestURL,parameters:[&quot;phone&quot;:phoneNumber],encoding: .URL,headers: [&quot;apix-key&quot;:apiKey]).validate().responseJSON &#123; (response) in            &#x2F;&#x2F;是否请求成功            switch response.result&#123;            case .Success:                print(&quot;数据请求成功&quot;)            case .Failure(let error):                print(error)            &#125;        &#125;        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>validate()将确认响应的状态编码控制在可接受的范围200-299内,如果验证失败,那么在响应的处理方法内部将会出现一个错误.</p><h4 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">一个简单地上传文件的小栗子<span class="token keyword">let</span> fileURL <span class="token operator">=</span> <span class="token builtin">NSBundle</span><span class="token punctuation">.</span><span class="token function">mainBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">URLForResource</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> uploadURL<span class="token punctuation">,</span> file<span class="token punctuation">:</span> fileURL<span class="token operator">!</span><span class="token punctuation">)</span><span class="token comment">//这里的前面两个参数分别是连接方式,请求接口,第三个参数就是需要上传的文件的本地URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然也可以使用NSData的形式上传:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> uploadURL<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token string">"upload Data"</span><span class="token punctuation">.</span><span class="token function">dataUsingEncoding</span><span class="token punctuation">(</span><span class="token builtin">NSUTF8StringEncoding</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他的还有使用MultipartFormData等,这里就不做介绍了.</p><h4 id="上传附件时监测进度"><a href="#上传附件时监测进度" class="headerlink" title="上传附件时监测进度"></a>上传附件时监测进度</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> uploadURL<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token string">"upload Data"</span><span class="token punctuation">.</span><span class="token function">dataUsingEncoding</span><span class="token punctuation">(</span><span class="token builtin">NSUTF8StringEncoding</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span>progress <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>written<span class="token punctuation">,</span> totalWritten<span class="token punctuation">,</span> totalNeedsToWrite<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"written bytes <span class="token interpolation"><span class="token delimiter variable">\(</span>written<span class="token delimiter variable">)</span></span> totalWritten <span class="token interpolation"><span class="token delimiter variable">\(</span>totalWritten<span class="token delimiter variable">)</span></span>  totalBytes<span class="token interpolation"><span class="token delimiter variable">\(</span>totalNeedsToWrite<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token comment">///每次上传一部分数据就会回调此闭包.</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样的,不管是上传还是请求数据或是下载文件,我们都可以得到服务器的响应,所以上传也是可以使用response系列方法的:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> uploadURL<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token string">"upload Data test "</span><span class="token punctuation">.</span><span class="token function">dataUsingEncoding</span><span class="token punctuation">(</span><span class="token builtin">NSUTF8StringEncoding</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span>progress <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>written<span class="token punctuation">,</span> totalWritten<span class="token punctuation">,</span> totalNeedsToWrite<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"written bytes <span class="token interpolation"><span class="token delimiter variable">\(</span>written<span class="token delimiter variable">)</span></span> totalWritten <span class="token interpolation"><span class="token delimiter variable">\(</span>totalWritten<span class="token delimiter variable">)</span></span>  totalBytes<span class="token interpolation"><span class="token delimiter variable">\(</span>totalNeedsToWrite<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>responseJSON <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token comment">//服务器对本次数据上传的响应</span>        <span class="token punctuation">&#125;</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有上传就有下载,Alamofire提供Alamofire.download()方法来执行下载操作:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">///本例中所下载的文件是在网上随便找的一张图片</span><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"http://pic.to8to.com/attch/day_160218/20160218_d968438a2434b62ba59dH7q5KEzTS6OH.png"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">NSURL</span> <span class="token keyword">in</span>         <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">NSSearchPathForDirectoriesInDomains</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token builtin">DocumentDirectory</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token builtin">UserDomainMask</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>         path <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"/<span class="token interpolation"><span class="token delimiter variable">\(</span>response<span class="token punctuation">.</span>suggestedFilename<span class="token operator">!</span><span class="token delimiter variable">)</span></span>"</span>         <span class="token keyword">return</span> <span class="token constant">NSURL</span><span class="token punctuation">.</span><span class="token function">fileURLWithPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>download方法接受一个闭包,此闭包在文件下载完成后调用,我们需要在闭包中返回文件下载完毕之后,保存此文件的资源路径,你也可以单独拆分一个函数,然后传入函数名即可<br>如果觉得这样比较麻烦或者没有必要在闭包中那些代码,我们可以使用默认的资源路径:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">///这里使用的是系统的Document路径</span> <span class="token keyword">let</span> destina <span class="token operator">=</span> <span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token builtin">Request</span><span class="token punctuation">.</span><span class="token function">suggestedDownloadDestination</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">DocumentDirectory</span><span class="token punctuation">,</span> domain<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">UserDomainMask</span><span class="token punctuation">)</span>         <span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"http://pic.to8to.com/attch/day_160218/20160218_d968438a2434b62ba59dH7q5KEzTS6OH.png"</span><span class="token punctuation">,</span>destination<span class="token punctuation">:</span> destina<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同样的,下载文件也可以检测下载进度</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> destina <span class="token operator">=</span> <span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token builtin">Request</span><span class="token punctuation">.</span><span class="token function">suggestedDownloadDestination</span><span class="token punctuation">(</span>directory<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">DocumentDirectory</span><span class="token punctuation">,</span> domain<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token builtin">UserDomainMask</span><span class="token punctuation">)</span><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"http://pic.to8to.com/attch/day_160218/20160218_d968438a2434b62ba59dH7q5KEzTS6OH.png"</span><span class="token punctuation">,</span>destination<span class="token punctuation">:</span> destina<span class="token punctuation">)</span><span class="token punctuation">.</span>progress <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>downloadBytes<span class="token punctuation">,</span> totalDownloadBytes<span class="token punctuation">,</span> totalBytesToDownload<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token comment">//在此实现检测下载进度逻辑</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要实现断点续传来下载文件的话,实现起来也是比较简单,首先,Alamofire提供了对应的download方法:</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token builtin">Alamofire</span><span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>resumeData<span class="token punctuation">:</span> <span class="token function">NSData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> destination<span class="token punctuation">:</span> destina<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数应该传入已经下载得到的数据,就可以在已经下载数据的基础上继续下载,那么我们需要做的事就只有在下载出现错误或者暂停的时候把已下载数据保存起来就可以了,大致的实现思路就是这样,我这里就不作演示了.</p><p>暂时先总结到这里,如果本文中有什么写的不正确的地方,欢迎指正!<br>(搬运自本人的简书)</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
